[
  {
    "objectID": "get-started.html",
    "href": "get-started.html",
    "title": "llm-random.github.io",
    "section": "",
    "text": "Install quarto: https://quarto.org/docs/get-started/\nVoilà\n\n\n\n\n\n$ quarto preview\n\n\n\n\n\n$ quarto render\n$ git commit -m \"Add new post\"\n$ git push"
  },
  {
    "objectID": "get-started.html#setup",
    "href": "get-started.html#setup",
    "title": "llm-random.github.io",
    "section": "",
    "text": "Install quarto: https://quarto.org/docs/get-started/\nVoilà"
  },
  {
    "objectID": "get-started.html#run-locally-hot-reload",
    "href": "get-started.html#run-locally-hot-reload",
    "title": "llm-random.github.io",
    "section": "",
    "text": "$ quarto preview"
  },
  {
    "objectID": "get-started.html#deployment",
    "href": "get-started.html#deployment",
    "title": "llm-random.github.io",
    "section": "",
    "text": "$ quarto render\n$ git commit -m \"Add new post\"\n$ git push"
  },
  {
    "objectID": "posts/neuron_recycling/index.html",
    "href": "posts/neuron_recycling/index.html",
    "title": "Neuron Recycling",
    "section": "",
    "text": "Sparse neural networks have garnered attention due to their theoretical promise of lowered computational demands and memory savings. However, to this date, the theoretical gains have largely failed to materialize due to the lack of hardware support for this kind of models. In this work, we explore the idea of neuron recycling which is inspired by pruning - a method often employed to induce sparsity in neural networks. We also present lessons we have learned along the way.\n\nIntroduction\nPruning is a well-established technique used to sparsify neural networks (LeCun et al., 1989; Han et al., 2015). It relies on the fact that typically a large part of a trained neural network can be masked without impacting the accuracy of the network, albeit often requiring additional fine-tuning in order to regain some lost performance. Despite multiple works proposing various neuron-selection criteria for pruning, magnitude-based pruning remains a viable option. The Lottery Ticket Hypothesis (Frankle and Carbin, 2019) is a major finding on the way to explain how the initialization impacts neural networks. The main point of the LTH is that through iterative pruning, performant subnetworks depending on the initialization can be found in neural networks. Those well-initialized network fragments are the namesake of LTH (the “lottery tickets”). Although some notions of the original LTH paper have been challenged (Frankle et al., 2020), it has remained the subject of active research and a motivation for our work. \nBy combining the two ideas (pruning and LTH) we arrive at a new potential technique for raising neural network performance. If we are able to remove parts of the network without hurting the performance (pruning) and the fitness of a part of a network is determined at initialization, perhaps we could re-initialize the unnecessary network parts (i. e. draw more “lottery tickets”), leading to a better-performing network.\n\n\n\nPreliminaries\nBefore we move to the presentation of our experiments and findings, let’s first discuss the training setup, define key terminology, and go over the basics.\n\nModel and training setup\nIn our project, we are focusing on the Transformer (Vaswani et al., 2017), since it’s a major architecture across different domains (Touvron et al., 2023; Dosovitskiy et al., 2021). For the specific type of the model, we are working on encoder-only BERT (Devlin et al., 2019). Taking into consideration available computational resources and expected iteration time (we wanted to try as many options as possible), we decided to opt for the BERT Medium configuration (with \\(d_\\text{model}=512\\) and \\(8\\) attention heads). We focus on the feed-forward layer, because it is the most computationally demanding part of commonly-used transformer models and, in large models, it contains the majority of the parameters. At the same time, the amount of research focusing on the attention mechanism is overwhelming, suggesting that the feed-forward layer is a relatively unexplored area.\nWe trained the model for \\(80{,}000\\) steps (around compute-optimal number of train samples for this size of model) , with Adam (Kingma and Ba, 2017), using batch size of \\(256\\) and learning rate of \\(0.001\\). We used Kaiming uniform (He et al., 2015) initialization in the feed-forward layer. For the training objective, we use masked language modeling loss, as described in (Devlin et al., 2019).\nIn the following part of this post, we will often use the terms neuron and magnitude. Below are the definitions we employ.\nNeuron. In the Transformer, feed-forward layer consists of two linear layers, with a nonlinearity in between. The first layer maps the input vector from \\(d_\\text{model}\\) to \\(d_\\text{ff}\\) dimension, and the second one from \\(d_\\text{ff}\\) back to \\(d_\\text{model}\\). Typically, \\(d_\\text{ff}\\) is four times greater than \\(d_\\text{model}\\). By neuron, we will understand all weights interacting with a particular coordinate in the \\(\\mathbb{R}^{d_\\text{ff}}\\) activation vector. In the torch implementation, a neuron’s weights are the parameters in a given row of the first feed-forward matrix and in the corresponding column in the second one. \nMagnitude. To calculate magnitude of a weight, we will use its absolute value. As the magnitude of the \\(i\\)-th neuron we will use value of the expression \\[M= \\lVert x_i^{in}\\rVert \\cdot \\lVert x_i^{out}\\rVert,\\] where:\n\n\\(\\lVert x_i^{in}\\rVert\\) - \\(l_2\\) norm of the \\(i\\)-th row in the weight matrix of the input linear layer\n\\(\\lVert x_i^{out}\\rVert\\) - \\(l_2\\) norm of the \\(i\\)-th column in the weight matrix of the output linear layer.\n\n\n\nPruning\nPruning is a technique used to induce sparsity and decrease the parameter count in a neural network. In simple terms, it means deleting the least important neurons (structured pruning) or weights (unstructured pruning). A typical implementation realizes this by either multiplying the output of the deleted neurons by 0 or setting the weights of the neuron to 0. A widely-used proxy for the importance of a neuron or weight is its magnitude. Notably, the network can still be trained even if the architecture doesn’t contain feed-forward layer, because the model can learn to represent the same trainsformation using only Attention. However, without FF the training time needed to achieve the same performance is much longer.\n\nBelow we present a plot with loss curves of the model gradually pruned at the FF layer, starting in step \\(10{,}000\\), such that the layer is completely masked in the end of the training. In this case, we perform structured pruning, i.e. we mask the whole neurons. As a comparison, we also add regular model and the one without feed-forward layer.\n\n\n\n\n                                                    \n\n\nInterestingly, the effect of pruning can’t be visible for a significant fraction of the training time. It’s also worth noting that in the end the model without FF Layer performs slightly better than the pruned one. This is because in the first case, Attention was trained to adjust  from the very beginning of the training.\n\n\nThe goal\n\n\nThe end-goal of the project was to create a method that would allow us to make better use of the parameters in the feed-forward layer. In this context, a natural question arises - against what baseline should our results be compared? To answer this question, we trained the model with differing dimensionalities of the feed-forward layer. The results are presented below.\n\n\n\n\n                                                    \n\n\nThe true BERT Medium configuration has \\(d_\\text{ff}=2048\\). As we might expect, the performance drops when \\(d_\\text{ff}\\) is decreased and improves when \\(d_\\text{ff}\\) is increased. In particular, the model with the feed-forward layer two times wider than the baseline achives the same loss in approximately 20% fewer steps. This shows the direction for our project: through neuron recycling, we want the model to behave more like the one with larger \\(d_\\text{ff}\\) by making a better use of available parameters.\n\n\n\nUnderstanding neuron magnitudes\nOne of the key inspirations for our work was structured pruning, where neuron/filter magnitude is often chosen as the measure of significance (Li et al., 2017; He et al., 2018). We were interested in how this metric evolves during the training process. At first, we thought a histogram of neuron magnitudes would exhibit a normal distribution. However, our experiments showed something different. The following graph shows evolution of neuron magnitudes throughout the training process. \n\n\n\n\n    \n\n\n\n    \n        \n        \n    \n\n\n\n\nIn the early stages of training, the neurons split into two groups, one with much lower magnitudes than the other. This finding opens up many discussion topics. One could guess that the neurons belonging to the group with smaller magnitudes potentially don’t hold much importance and can be pruned freely. However, it’s also possible that these neurons, though small, play a critical role in specific tasks.\nThis phenomenon is not limited to the first layer of the network. We have observed it in all layers, apart from the last one, as shown in the following plot.\n\n\n\n\n    \n\n\n\n    \n        \n        \n    \n\n\n\n After examining these experiments, we were trying to understand why in the early layers we observed two distinct groups of neurons, categorized by their magnitudes. One possible explanation is that certain parts of the network receive a smaller signal and are slower to improve in training. We designed an experiment to check that. We periodically froze all parts of the network except for the feed-forward component and continued to train it for several batches of data. We hypothesized that in this scenario, weaker neurons might catch up, resulting in a more even distribution. We called this procedure overtraining  feed-forward layer. It’s important to note that this approach is impractical and computationally heavy, but we wanted to use it for the purpose of illustration. The results are depicted in the following plot.\n\n\n\n\n                                                    \n\n\n\n\nWe can see that the group of weaker  neurons has moved to the right after performing additional training of the FF part. However, neurons still form two distinct groups: overtraining the whole layer is not enough for the weaker ones to catch up. In the next experiment, we have examined the scenario of retraining only small magnitude neurons, only large magnitude neurons and random subsets. How does it affect the performance? The results are depicted on the following plot.\n\n\n\n\n\n                                                    \n\n\n\nOvertraining only the smallest neurons yields the best results when compared to reinforcing high-magnitude ones. Notably, overtraining the small ones gives similar gains in performance to working on the entire layer! Contrarily, ampifying the highest ones gives gains comparable to no overtraining at all. This provides a compelling argument in favor of our technique, suggesting that we can achieve significant gain by improving the the functionality of low-magnitude neurons. \n\nMagnitudes in openly available pretrained models\n\nSo far, we have performed a series of experiments in one particular setting. We were curious to see how our observations would translate to well-established, large-scale foundation models like BERT Large or T5.\n\n\n\n\n                                                    \n\n\n\n\n\n                                                    \n\n\nThere is a clear difference between the plots above. Magnitudes in T5 seem similar to those in our smaller models, while BERT Large presents a more balanced distribution. What could account for these variations? It turns out that an important difference between the training process of these models was the use of weight decay. Intuitively, adding a component to the loss function that corresponds to the magnitudes of weights, helps balance the magnitudes of neurons. In the following part of the article we will further explore the idea of explicitly changing the magnitude distribution through modification of the loss function. \nFindings presented above support the idea of exploring neuron recycling and offer a good foundation for further experiments. In the next sections, we will present results on this topic and share our insights.\n\n\n\nRecycling\n\nThe central part of our work was a method we called neuron recycling. The process consists of three phases, repeated periodically: training, selection and reinitialization.\n\n\n\n\n\n\nIn the training phase, the model is trained to predict masked tokens (masked language modelling).\nIn the selection phase, the least important neurons are determined, where the baseline criterion is neuron magnitude.\nIn the reinitialization phase, new weights are assigned to neurons.\n\nAlthough this procedure is conceptually simple, it allows for many degrees of freedom. Here are some choices that can be made:\n\nThe number of training steps before consecutive selection / reinitialization phases\nThe percentage of recycled neurons\nSelection / reinitialization strategies\n\nAfter examining the pruning literature, we found that the simple magnitude-based approach works well in most cases (Blalock et al., 2020; Maene et al., 2021). Moreover, it is easy to implement and computationally efficient. This approach is also grounded in our experiments. Below we present the training curves for the model pruned gradually using different criterions: high/low magnitude and random neurons.\n\n\n\n\n                                                    \n\n\n\n\nAs you can see, removing low magnitude neurons hurts the model the least, and removing high magnitude ones cases the largest loss. This is a good argument that this criterion correlates well with neuron significance.\n\nBaseline recycling\nThe most straightforward reinitialization scheme is to sample the weights of the reinitialized neurons from the initial distribution. After examining the performance of this solution, we could not see any difference between recycling and vanilla training.\n\n\n\n\n                                                    \n\n\nAs a sanity check, we have examined the histogram presenting the number of times each neuron was recycled, discovering that the same small subset of neurons was being reinitialized over and over during training.\n\n\n\n\n                                                    \n\n\nAs we have seen in the previous section, on average magnitude of neurons grows throughout the training. Therefore, sampling from the initial distribution will cause the reycycled neurons to have even lower magnitudes. As an effect, they are unable to catch up to before another selection phase. Thus, the recycled neurons are caught up in a vicious cycle in which they are always recycled before achieving high magnitude.\n\n\n\nImmunity\nTo address the problem we observed in the previous approach, we tried another strategy - recycling with immunity. The idea here is to encourage diverse recycling by making each recycled neuron immune to further recycling for some predefined number of steps. We hypothesized that a reinitialized neuron needs some time to grow, which was not possible in the initial setting. The following plot illustrates that immunity prevents the recycled neurons from being catched in a vicious cycle.\n\n\n\n\n                                                    \n\n\nHigher number of immunity rounds (i.e. number of selection phases when a newly recycled neuron can’t be chosen) causes more neurons to be reinitialized at least once. Unfortunately, this eventually causes well-behaving parts of the network to be chosen for recycling. As an effect, the performance drops.\n\n\n\n\n                                                    \n\n\n\n\nModifying reinitialization distribution\nAs we have pointed out before, magnitude and weight distribution drifts away from the initial distribution as the training progresses. However, during our initial attempts, we initialized the weights sampling from the initial distribution. To fix this issue, we decided to try out another weight sampling technique. In this approach we used the normal distribution with mean and standard deviation equal to the mean and standard deviation of all the weights in the respective layer. This approach, like immunity, eliminated the vicious cycle  problem.\n\n\n\n\n                                                    \n\n\nHowever, this process introduced a lot of noise with adverse effect on the model’s loss.\n\n\n\n\n                                                    \n\n\n\n\nCopying existing neurons\nIn the problem of growing  or warm starting  neural networks, the aim is to gradually add new weights to the model througout the training. In the case of Large Language Models, this topic is mentioned in the Gopher (Rae et al., 2022) paper. In particular, the authors describe multiple strategies for adding new neurons to the feed-forward layer and conclude that copying existing ones (with an addition of small noise) seems to give the best results. We tried this approach in our setting, but couldn’t observe better performance.\n\n\n\n\n                                                    \n\n\n\n\nSmooth recycling\nWe came up with the hypothesis that neuron recycling could actually work better if it didn’t have sudden and discrete changes in neuron values. These sharp changes plausibly destabilize the training process. This issue is clear in sudden loss spikes, such as those observed in the recycling with modified distribution part. It may be particularly problematic that the statistics of the optimizer need to adjust to the new values, but they don’t have time to do that. To make the recycling process smoother, we modified our strategy to linearly interpolate between the old weights of the neuron and the their target values. More precisely, the new value assigned for a recycled weight in this approach is \\[ x = \\alpha \\ x_{target} + (1-\\alpha) \\ x_{old},\\] where:\n\n\\(x_{target}\\) - target value chosen for the weight; this parameter is trainable right away\n\\(x_{old}\\) - old value of the weight before recycling; this value is no longer trainable\n\\(\\alpha\\) - non-trainable parameter, changed linearly from 0 to 1 over 1000 steps following the selection phase.\n\nWith this modification, we saw that the training loss became smoother. However, the solution was still not able to beat the baseline. \n\n\n\n\n                                                    \n\n\n\n\n\nTangent - Midpoint Loss\nWhile inspecting the distribution of neuron magnitudes during the training, we can notice that it is quite uneven - a large percentage of neurons remains small, and the distribution is right-skewed. Since the goal of our project was to reduce the number of low-quality, i.e., small neurons, we came up with a pretty risky solution: Midpoint Loss. The idea was to introduce an additional loss term that would encourage neuron growth and “even-ness” of the magnitude distribution. The general equation for the midpoint loss is\n\\[ Loss = \\sum_{l = 1}^{L} \\sum_{n = 1}^{d_\\text{ff}} \\ d\\left( M_{l,n}, \\ sg\\left(\\bar{M}_{l}\\right) \\right)\\] where:\n\n\\(M_{l,n}\\) - magnitude of th \\(n^{\\text{th}}\\) neuron in the \\(l^{\\text{th}}\\) layer. In some experiments we used the \\(log\\) of the magnitude\n\\(\\bar{M}_{l}\\) - average neuron magnitude in layer \\(l\\), typically calculated as arithmetic mean. In some experiments, median was used instead due to its robustness to outliers\n\\(sg\\) - stops the gradient from flowing through\n\\(d\\) - distance function, typically \\(l_1\\) or \\(l_2\\)\n\\(d_\\text{ff}\\) - number of neurons in a layer. In some experiments, we only summed over neurons with magnitude below the average magnitude of the layer, to encourage growth of small neurons, without thwarting the growth of the large ones\n\\(L\\) - number of layers.\n\nSince this idea is quite similar to weight decay, we decided not to optimize this term with Adam, but to split it from the task loss and optimize it using simple gradient descent - a similar technique is used in AdamW (Loshchilov and Hutter, 2019) to incorporate weight decay loss term.\n\n\n\n\n                                                    \n\n\n\nMidpoint loss achieved the goal of boosting the small neurons, however it failed to make a positive impact on the model’s performance.\n\n\n\n\n                                                    \n\n\n\n\n\n\nConclusion\nIn this work, we described our attempts to integrate pruning and Lottery Ticket Hypothesis via neuron recycling. Although we were not able to beat the baseline using our technique, we explored the topic thoroughly and conducted a series of experiments, providing valuable insights into the inner workings of a transformer. We hope that our findings may be a helpful resource for future studies and investigations in this area.   \n\n\nReferences\n\n\nDavis Blalock, Jose Javier Gonzalez Ortiz, Jonathan Frankle, and John Guttag. 2020. What is the state of neural network pruning?\n\n\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: Pre-training of deep bidirectional transformers for language understanding.\n\n\nAlexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, and Neil Houlsby. 2021. An image is worth 16x16 words: Transformers for image recognition at scale.\n\n\nJonathan Frankle and Michael Carbin. 2019. The lottery ticket hypothesis: Finding sparse, trainable neural networks.\n\n\nJonathan Frankle, Gintare Karolina Dziugaite, Daniel Roy, and Michael Carbin. 2020. Linear mode connectivity and the lottery ticket hypothesis. In Hal Daumé III and Aarti Singh, editors, Proceedings of the 37th international conference on machine learning, volume 119, pages 3259–3269. PMLR.\n\n\nSong Han, Jeff Pool, John Tran, and William Dally. 2015. Learning both weights and connections for efficient neural network. In C. Cortes, N. Lawrence, D. Lee, M. Sugiyama, and R. Garnett, editors, Advances in neural information processing systems, volume 28. Curran Associates, Inc.\n\n\nKaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2015. Delving deep into rectifiers: Surpassing human-level performance on ImageNet classification.\n\n\nYang He, Guoliang Kang, Xuanyi Dong, Yanwei Fu, and Yi Yang. 2018. Soft filter pruning for accelerating deep convolutional neural networks.\n\n\nDiederik P. Kingma and Jimmy Ba. 2017. Adam: A method for stochastic optimization.\n\n\nYann LeCun, John Denker, and Sara Solla. 1989. Optimal brain damage. In D. Touretzky, editor, Advances in neural information processing systems, volume 2. Morgan-Kaufmann.\n\n\nHao Li, Asim Kadav, Igor Durdanovic, Hanan Samet, and Hans Peter Graf. 2017. Pruning filters for efficient ConvNets.\n\n\nIlya Loshchilov and Frank Hutter. 2019. Decoupled weight decay regularization.\n\n\nJaron Maene, Mingxiao Li, and Marie-Francine Moens. 2021. Towards understanding iterative magnitude pruning: Why lottery tickets win.\n\n\nJack W. Rae, Sebastian Borgeaud, Trevor Cai, Katie Millican, Jordan Hoffmann, Francis Song, John Aslanides, Sarah Henderson, Roman Ring, Susannah Young, Eliza Rutherford, Tom Hennigan, Jacob Menick, Albin Cassirer, Richard Powell, George van den Driessche, Lisa Anne Hendricks, Maribeth Rauh, Po-Sen Huang, et al. 2022. Scaling language models: Methods, analysis & insights from training gopher.\n\n\nHugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timothée Lacroix, Baptiste Rozière, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, and Guillaume Lample. 2023. LLaMA: Open and efficient foundation language models.\n\n\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "llm-random",
    "section": "",
    "text": "Mixture of Tokens\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2023\n\n\nSzymon Antoniak *, Sebastian Jaszczur * †, Michał Krutul, Maciej Pióro, Jakub Krajewski, Jan Ludziejewski, Tomasz Odrzygóźdź, Marek Cygan ‡\n\n\n\n\n\n\n  \n\n\n\n\nNeuron Recycling\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJul 11, 2023\n\n\nJakub Krajewski *, Maciej Pióro *, Sebastian Jaszczur †, Marek Cygan ‡\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Blog of LLM-Random research group, centered in IDEAS NCBR, started in mid-2022 by Sebastian Jaszczur. Members, in the order of joining, listed below.\n\nSebastian Jaszczur\nMarek Cygan (as advisor)\nJakub Krajewski\nSzymon Antoniak\nMaciej Pióro\nTomasz Odrzygóźdź\nJan Ludziejewski\nMichał Krutul\n\nPublic repositories of the group are available at LLM-Random organization on GitHub."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html",
    "href": "posts/mixture_of_tokens/index.html",
    "title": "Mixture of Tokens",
    "section": "",
    "text": "We introduce Mixture of Tokens, a novel, fully-differentiable Transformer architecture that allows for increasing model size while keeping computation cost constant. xxxx We introduce Mixture of Tokens, a novel, fully-differentiable Transformer architecture that allows for increasing model size while keeping computation cost constant.\n\nIt avoids problems typical for Mixture of Experts architectures\nIt is compatible with causal and masked Large Language Models\nOur PoC model achieves the same performance as the baseline Transformer with \\(3\\times\\) wall-clock speedup and \\(4\\times\\) FLOPS reduction"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#scaling-language-models",
    "href": "posts/mixture_of_tokens/index.html#scaling-language-models",
    "title": "Mixture of Tokens",
    "section": "Scaling Language Models",
    "text": "Scaling Language Models\nLarge language models based on Transformers currently make up one of the most active fields in ​​Artificial Intelligence, exhibiting human-level performance in a variety of tasks. This is in large part due to their scaling properties - (Kaplan et al. 2020; Hoffmann et al. 2022) showed that an increase in model size results in a predictable increase in performance. This scaling leads to an ever-growing demand for computational resources, with their effective utilization often deemed as one of the critical challenges of the field (Rae et al. 2022; Jaszczur et al. 2021; Nawrot et al. 2022)."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#mixture-of-experts",
    "href": "posts/mixture_of_tokens/index.html#mixture-of-experts",
    "title": "Mixture of Tokens",
    "section": "Mixture of Experts",
    "text": "Mixture of Experts\nHow can we increase the model size without additional computational cost? Mixture of Expert does this by replacing the feed-forward layer standard for Transformer architectures with a (potentially very large) set of experts, together with a small network often called a controller1. The (trainable) controller matches tokens and experts in a way that each token is processed only by a small subset of experts.\nSimilarly to vanilla Transformers, the performance of MoE models also scale with parameter count (Clark et al. 2022). For a more detailed background and explanation of variants of the MoE architecture, see Background."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#limitations-of-current-approaches",
    "href": "posts/mixture_of_tokens/index.html#limitations-of-current-approaches",
    "title": "Mixture of Tokens",
    "section": "Limitations of current approaches",
    "text": "Limitations of current approaches\nWhile the performance of the huge-parameter-count MoE architectures is impressive, they come with an entirely new set of challenges, during both training and inference. The most notable include:\n\nTraining instability. Multiple studies (Fedus, Zoph, and Shazeer 2022; Du et al. 2022; Mustafa et al. 2022) report difficulties in training MoE models due to instabilities. This is likely due to with the nature of the technique: the operation of choosing top-k most relevant tokens/experts in discrete, and thus small changes of controller weights can have disproportional effects on controller decisions. We hypothesise that existing techniques used for training the cotnroller with gradient descent, while somewhat effective, do not entirely solve this problem. (Jaszczur et al. 2021) reported training stability improvements due to using a weighted average of expert outputs instead of sampling.\nLoad imbalance. Typically, in MoE we set the maximum capacity for each expert. However, we are not able to efficiently restrict the choice of the routing network to assign tokens in a perfectly balanced way. This leads to token dropping (when some tokens are not processed by an expert) and mode collapse (when the cotroller sends almost all tokens to a few experts).\nInformation leak. Some of the most successful MoE methods process tokens from different positions in a sequence together (i.e. by comparing scores of all tokens in a batch). This imposes an information leak, and hinders their utility in autoregressive decoding.\n\nOur technique is as stable as a vanilla Transformer, because the network is fully differentiable and no discrete choices are made during training. As every expert receives the same number of tokens, the issue of load imbalance is side-stepped as well. Finally, our technique is fully compatible with autoregressive decoding. See a detailed explanation of the technique in [Method]."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#experimental-setup",
    "href": "posts/mixture_of_tokens/index.html#experimental-setup",
    "title": "Mixture of Tokens",
    "section": "Experimental setup",
    "text": "Experimental setup\nFor the baseline, we train a standard GPT-like model on the language modeling task using cross entropy loss on the C4 dataset (Raffel et al. 2019). Our model replaces all feed-forward layers with Mixture of Tokens layers.\nIn our proof-of-concept experiments, we train a decoder-only Transformer model with the following hyperparameters:\n\n\n\n\n\n\nModel Hyperparameters\n\n\n\n\n4 layers\n256 embedding dimension\n1024 hidden dimension\n4 attention heads\n\n\n\nFor the model implementing Mixture of Tokens we choose the following hyperparameters:\n\n\n\n\n\n\nMixture of Tokens Hyperparameters\n\n\n\n\n32 group size\n512 experts\n32x more parameters than the feed-forward layer in the baseline model\n\n\n\nWhen training both the baseline and the Mixture of Token models we use the following setup:\n\n\n\n\n\n\nTraining Setup\n\n\n\n\n250K training steps\n256 context length\n256 batch size\nlr warmup for the first 1% of training\ncosine scheduling to 10% of peak lr at the end of training\n\n\n\nThe learning rate was tuned separately for both our model and the baseline:\n\n\n\n\n\n\nLearning Rate\n\n\n\n\nBaseline: 4e-3\nMixture of Tokens: 2e-3"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#results",
    "href": "posts/mixture_of_tokens/index.html#results",
    "title": "Mixture of Tokens",
    "section": "Results",
    "text": "Results\nOur technique shows very promising results, reducing the required training steps by a factor of 4. The training time gains are also very significant.\n\n\n\n\n                                                    \n\n    \n Our Mixture of Tokens model attains the dense model's final training loss in just 24% of steps.\n\n\n\n\n\n\n                                                    \n\n If we measure actual training time, the final dense model's loss is achieved in only 33% of time."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#scaling-up",
    "href": "posts/mixture_of_tokens/index.html#scaling-up",
    "title": "Mixture of Tokens",
    "section": "Scaling Up",
    "text": "Scaling Up\nOur preliminary experiments suggest that Mixture of Tokens might work even better for larger model sizes. In upcoming weeks we aim to prepare a comprehensive comparison of larger models and compare them to Mixture of Experts methods."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#from-mixture-of-tokens-to-mixture-of-experts",
    "href": "posts/mixture_of_tokens/index.html#from-mixture-of-tokens-to-mixture-of-experts",
    "title": "Mixture of Tokens",
    "section": "From Mixture of Tokens to Mixture of Experts",
    "text": "From Mixture of Tokens to Mixture of Experts\nHow do we get from MoT to MoE? Assume that the controller in a Mixture of Tokens layer decided to mix in a very particular way: for a given group, it concentrated the entire weight on just one token. In this extreme case, each expert would receive a single, unmixed token. This would make the Mixture of Tokens forward pass equivalent to the Expert Choice described in Background.\nThis scenario has its advantages: in the default Mixture of Tokens setup for autoregressive training, tokens are aggregated across the batch dimension. However, during decoding, this setup allows for information to be exchanged between different examples. This could be undesirable in some use cases, e.g. when different examples in the same batch come from different users in the industry setting, possibly with privacy issues.\nHow could we make the controller focus on a single example? One can achieve this by adding a temperature parameter to the softmax operation used by the controller. Low temperature forces the weight distribution to concentrate - in the limit (as temperature approaches 0) causing the weights to focus exclusively on the token with the highest controller score.\n\n\n     \n\n\n\n                                                    \n\n Decreasing the temperature to 0 results in a weight concentration, while increasing it causes the weights to become more uniform.\n\n\n\nInterestingly, simply allowing the temperature parameter to be learnable for the controller in a Mixture of Tokens layer encourages this phenomenon.\n\n\n\n                                                    \n\n\nAs expected, this results in the controller focusing more on one token. We measured this by monitoring the entropy of weights produced by the controller (averaged over all token groups and all experts).\nSA: change naming “Controller Weights” suggest “controller parameters”. Rather it’d be “token weights” or “token importance scores”\n\n\n\n\n                                                    \n\n Allowing the temperature parameter to be learnable causes the mean entropy of weights drops to lower levels; in blocks 3 and 4, the entropy is near zero - which means that on average, almost all of the weight is attributed to just one token in a group.\n\n\n\nInterestingly, this comes at a cost of model performance.\n\n\n\n\n                                                    \n\n\nWe expect allowing the temperature to be learned at the end of training to be a very promising direction for “private” autoregressive decoding. That way, we would retain all the benefits of training with a high rate of token mixing, and prevent token mixing during inference."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#footnotes",
    "href": "posts/mixture_of_tokens/index.html#footnotes",
    "title": "Mixture of Tokens",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nrouter is also commonly used in MoE literature.↩︎"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#tldr",
    "href": "posts/mixture_of_tokens/index.html#tldr",
    "title": "Mixture of Tokens",
    "section": "",
    "text": "We introduce Mixture of Tokens, a novel, fully-differentiable Transformer architecture that allows for increasing model size while keeping computation cost constant. xxxx We introduce Mixture of Tokens, a novel, fully-differentiable Transformer architecture that allows for increasing model size while keeping computation cost constant.\n\nIt avoids problems typical for Mixture of Experts architectures\nIt is compatible with causal and masked Large Language Models\nOur PoC model achieves the same performance as the baseline Transformer with \\(3\\times\\) wall-clock speedup and \\(4\\times\\) FLOPS reduction"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#what-is-this-blogpost-about",
    "href": "posts/mixture_of_tokens/index.html#what-is-this-blogpost-about",
    "title": "Mixture of Tokens",
    "section": "",
    "text": "Ten tytuł sekcji brzmi średnio, może coś w stylu: ‘Blogpost content’ albo jeszcze mniej formalnie: ‘tl;dr’ We do a research work in the area of Mixture of Experts for Transformer, where the goal is to scale up the model while keeping computation constant. We invented and investigated a new way of achieving it, by designing a novel architecture, called Mixture of Tokens. This blogpost introduces our method, presents motivations for it, compares it against standard approach and shows experimental tests of Mixture of Tokens. To sum up we introduce Mixture of Tokens a novel, fully-differentiable Transformer architecture, thatTo sum up :\n\nallows for increasing model size while keeping computation cost constant\navoids problems typical for Mixture of Experts architectures\nis compatible with causal and masked Large Language Models\nWe introduce Mixture of Tokens, a novel, fully-differentiable Transformer architecture that allows for increasing model size while keeping computation cost constant\nit avoids problems typical for Mixture of Experts architectures\nit is compatible with causal and masked Large Language Models\n\nTrochę brzmi jakby to był jeden bullet point, ale rozbity\nIMO Styl nie jest jednolity z resztą tekstu"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#what-is-this-blogpost-about-sa-zrobić-jako-tldr-uzwięźlić",
    "href": "posts/mixture_of_tokens/index.html#what-is-this-blogpost-about-sa-zrobić-jako-tldr-uzwięźlić",
    "title": "Mixture of Tokens",
    "section": "",
    "text": "Ten tytuł sekcji brzmi średnio, może coś w stylu: ‘Blogpost content’ albo jeszcze mniej formalnie: ‘tl;dr’ We do a research work in the area of Mixture of Experts for Transformer, where the goal is to scale up the model while keeping computation constant. We invented and investigated a new way of achieving it, by designing a novel architecture, called Mixture of Tokens. This blogpost introduces our method, presents motivations for it, compares it against standard approach and shows experimental tests of Mixture of Tokens. To sum up we introduce Mixture of Tokens a novel, fully-differentiable Transformer architecture, thatTo sum up :\n\nallows for increasing model size while keeping computation cost constant\navoids problems typical for Mixture of Experts architectures\nis compatible with causal and masked Large Language Models\nWe introduce Mixture of Tokens, a novel, fully-differentiable Transformer architecture that allows for increasing model size while keeping computation cost constant\nIt avoids problems typical for Mixture of Experts architectures\nIt is compatible with causal and masked Large Language Models\n\nTrochę brzmi jakby to był jeden bullet point, ale rozbity\nIMO Styl nie jest jednolity z resztą tekstu"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#mixture-of-experts-sa-zmerdzuj-obie-wersje.mp",
    "href": "posts/mixture_of_tokens/index.html#mixture-of-experts-sa-zmerdzuj-obie-wersje.mp",
    "title": "Mixture of Tokens",
    "section": "Mixture of Experts [SA: zmerdzuj obie wersje][.MP]",
    "text": "Mixture of Experts [SA: zmerdzuj obie wersje][.MP]\nMy proposition for this Section: How can one increase the model size without increasing the compute? It must be made by changing the architecture. The standard MoE technique is to replace the feed-forward layer of Transformer with a with a (potentially very large) set of experts, equipped with the additional small network, called a controller1. The (trained) controllel matches tokens and experts in a way that each token is processed only by a small subset of experts. Increasing model size using MoE architectures was also shown (Clark et al. 2022) to scale with parameter count. More detailed background and explanation of variants of the MoE architecture is presented in Background.\nThe core idea in MoE is to increase model size without incurring additional computational costs. Roughly speaking, it is done by replacing the feed-forward layer standard for Transformer architectures with a (potentially very large) set of experts. The word “new” here is misleading, one may think that we talk about our MoT methodIn this new setup, a given token is processed only by a small subset of experts, and that selection is made by a small network called a controller. 2 Increasing model size using MoE architectures was also shown (Clark et al. 2022) to scale with parameter count. More detailed background and explanation of variants of the MoE architecture is presented in Background."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#mixture-of-experts-sa-zmerdzuj-obie-wersje",
    "href": "posts/mixture_of_tokens/index.html#mixture-of-experts-sa-zmerdzuj-obie-wersje",
    "title": "Mixture of Tokens",
    "section": "Mixture of Experts SA: zmerdzuj obie wersje",
    "text": "Mixture of Experts SA: zmerdzuj obie wersje\nMy proposition for this Section: How can one increase the model size without increasing the compute? It must be made by changing the architecture. The standard MoE technique is to replace the feed-forward layer of Transformer with a with a (potentially very large) set of experts, equipped with the additional small network, called a controller1. The (trained) controllel matches tokens and experts in a way that each token is processed only by a small subset of experts. Increasing model size using MoE architectures was also shown (Clark et al. 2022) to scale with parameter count. More detailed background and explanation of variants of the MoE architecture is presented in Background.\nHow can we increase the model size without additional computational cost? Mixture of Expert does this by replacing the feed-forward layer standard for Transformer architectures with a (potentially very large) set of experts, together with a small network often called a controller2. The (trainable) controllel matches tokens and experts in a way that each token is processed only by a small subset of experts. Increasing model size using MoE architectures was also shown (Clark et al. 2022) to scale with parameter count. More detailed background and explanation of variants of the MoE architecture is presented in Background."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#from-mixture-of-tokens-to-mixture-of-experts-dodać-opisy-do-wszystkich-plotów-w-tej-sekcji",
    "href": "posts/mixture_of_tokens/index.html#from-mixture-of-tokens-to-mixture-of-experts-dodać-opisy-do-wszystkich-plotów-w-tej-sekcji",
    "title": "Mixture of Tokens",
    "section": "From Mixture of Tokens to Mixture of Experts Dodać opisy do wszystkich plotów w tej sekcji",
    "text": "From Mixture of Tokens to Mixture of Experts Dodać opisy do wszystkich plotów w tej sekcji\nHow do we get from MoT to MoE? Assume that the controller in a Mixture of Tokens layer decided to mix in a very particular way: for a given group to mix, it concetrated the entire weight on one position. In this extreme case, the controller would assign one particular token from the group for each expert. This would make the Mixture of Tokens forward pass equivalent to the Expert Choice described in Background.\nThis scenario has its advantages: in the default Mixture of Tokens setup for autoregressive training, tokens are aggregated across the batch dimension. For decoding, this setup allows for information to be exchanged between different examples. This could be undesirable in some use cases.\nHow could we achieve this controller behavior? One way to do it is to have the controller use a temperature parameter before the softmax operation. Low temperature forces the weight distribution to be very focused - in the limit causing the weights to focus exclusively on one token, as desired. MK: tutaj dać wizualizację\nInterestingly, simply allowing the temperature parameter to be learnable for the controller in a Mixture of Tokens layer encourages this phenomenon: mp\n\n\n\n                                                    \n\n\nAs expected, this results in the controller focusing more on one token. We measured this by monitoring the entropy of weights produced by the controller (avergaed over all token groups and all experts). For the base version of Mixture of Tokens, the results are as follows:\n\n\n\n                                                    \n\n\nWhile the learnable temperature results in near zero entropy in the later layers:\n\n\n\n                                                    \n\n\nInterestingly, this comes at a cost of model performance.\n\n\n\n\n                                                    \n\n\nWe expect allowing the temperature to be learned at the end of training to be a very promising direction for “private” autoregressive decoding: this way, we retain all the benefits of training with a high rate of token mixing, and prevent token mixing during inference.\nobrazki z różnymi temperaturami softmax"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#from-mixture-of-tokens-to-mixture-of-experts-dodać-opisy-do-wszystkich-plotów-w-tej-sekcji-dać-tytuły-w-title-case",
    "href": "posts/mixture_of_tokens/index.html#from-mixture-of-tokens-to-mixture-of-experts-dodać-opisy-do-wszystkich-plotów-w-tej-sekcji-dać-tytuły-w-title-case",
    "title": "Mixture of Tokens",
    "section": "From Mixture of Tokens to Mixture of Experts Dodać opisy do wszystkich plotów w tej sekcji, dać tytuły w title case",
    "text": "From Mixture of Tokens to Mixture of Experts Dodać opisy do wszystkich plotów w tej sekcji, dać tytuły w title case\nHow do we get from MoT to MoE? Assume that the controller in a Mixture of Tokens layer decided to mix in a very particular way: for a given group, it concetrated the entire weight just one token. In this extreme case, each expert would receive a single, unmixed token. This would make the Mixture of Tokens forward pass equivalent to the Expert Choice described in Background.\nThis scenario has its advantages: in the default Mixture of Tokens setup for autoregressive training, tokens are aggregated across the batch dimension. For decoding, this setup allows for information to be exchanged between different examples. This could be undesirable in some use cases.\nHow could we achieve this controller behavior? One can achieve this by adding a temperature parameter to the softmax operation used by the controller. Low temperature forces the weight distribution to be very focused - in the limit causing the weights to focus exclusively on one token, as desired.\n\n\n\n\n                                                    \n\n\nInterestingly, simply allowing the temperature parameter to be learnable for the controller in a Mixture of Tokens layer encourages this phenomenon: mp\n\n\n\n                                                    \n\n\nAs expected, this results in the controller focusing more on one token. We measured this by monitoring the entropy of weights produced by the controller (averaged over all token groups and all experts).\n\n\n\n\n                                                    \n\n Allowing the temperature parameter to be learnable causes the mean entropy of weights drops to lower levels; in blocks 3 and 4, the entropy is near zero - which means that on average, almost all of the weight is attributed to just one token in a group.\n\n\n\nInterestingly, this comes at a cost of model performance.\n\n\n\n\n                                                    \n\n\nWe expect allowing the temperature to be learned at the end of training to be a very promising direction for “private” autoregressive decoding. That way, we would retain all the benefits of training with a high rate of token mixing, and prevent token mixing during inference."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#summarized-algorithm",
    "href": "posts/mixture_of_tokens/index.html#summarized-algorithm",
    "title": "Mixture of Tokens",
    "section": "Summarized algorithm",
    "text": "Summarized algorithm\nThe pseudocode for computing output of MoT layer is as follows:\n\\[\n\\begin{align*}\n1. & \\text{Group tokens according to position} \\\\\n2. & \\text{For each expert and each group of tokens:} \\\\\n& a. \\text{Compute importance for all tokens in the group (with softmax, summing up to 1)} \\\\\n& b. \\text{Compute the weighted average of token representation (the mixed token)} \\\\\n& c. \\text{Run that mixed token through MLP (the most computationally heavy step)} \\\\\n& d. \\text{Add the output to the residual stream of each token, scaled by its weight from step (2a)} \\\\\n\\end{align*}\n\\]"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#how-to-deisgn-grouping",
    "href": "posts/mixture_of_tokens/index.html#how-to-deisgn-grouping",
    "title": "Mixture of Tokens",
    "section": "How to Deisgn Grouping",
    "text": "How to Deisgn Grouping\nThe only question left is a matter of grouping tokens in an autoregressive decoding. For each and every sentence we will process exactly one token at a time during inference, and we want to simulate that environment during training. Therefore, we cannot put two tokens from the same sequence into a single group even during training, as we will not be processing them at the same time during inference. Fortunately, the training and inference is ussually performed in batches, so we can mix tokens on the same position from multiple sequences. See the diagram below.\n\n\nWhile the maximum size of the group is limited by the batch size (number of sequences), note that those two numbers are not coupled together. We can always, if we want to, make groups smaller than the batch size."
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#how-to-group-tokens-in-mot",
    "href": "posts/mixture_of_tokens/index.html#how-to-group-tokens-in-mot",
    "title": "Mixture of Tokens",
    "section": "How to Group Tokens in MoT",
    "text": "How to Group Tokens in MoT\nThe only question left is a matter of grouping tokens in an autoregressive decoding. For each and every sentence we will process exactly one token at a time during inference, and we want to simulate that environment during training. Therefore, we cannot put two tokens from the same sequence into a single group even during training, as we will not be processing them at the same time during inference. Fortunately, the training and inference is ussually performed in batches, so we can mix tokens on the same position from multiple sequences. See the diagram below.\n\n\nWhile the maximum size of the group is limited by the batch size (number of sequences), note that those two numbers are not coupled together. We can always, if we want to, make groups smaller than the batch size."
  }
]