[
  {
    "objectID": "get-started.html",
    "href": "get-started.html",
    "title": "llm-random.github.io",
    "section": "",
    "text": "Install quarto: https://quarto.org/docs/get-started/\nVoilà\n\n\n\n\n\n$ quarto preview\n\n\n\n\n\n$ quarto render\n$ git commit -m \"Add new post\"\n$ git push"
  },
  {
    "objectID": "get-started.html#setup",
    "href": "get-started.html#setup",
    "title": "llm-random.github.io",
    "section": "",
    "text": "Install quarto: https://quarto.org/docs/get-started/\nVoilà"
  },
  {
    "objectID": "get-started.html#run-locally-hot-reload",
    "href": "get-started.html#run-locally-hot-reload",
    "title": "llm-random.github.io",
    "section": "",
    "text": "$ quarto preview"
  },
  {
    "objectID": "get-started.html#deployment",
    "href": "get-started.html#deployment",
    "title": "llm-random.github.io",
    "section": "",
    "text": "$ quarto render\n$ git commit -m \"Add new post\"\n$ git push"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "llm-random",
    "section": "",
    "text": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts\n\n\n\n\n\n\n\n\n\n\nWe introduce MoE-Mamba, which reaches the same performance as Mamba in 2.2x less training steps while preserving the inference performance gains of Mamba against the Transformer.\n\n\n\n\n\n\nJan 9, 2024\n\n\nMaciej Pióro, Kamil Ciebiera, Krystian Król, Jan Ludziejewski, Sebastian Jaszczur\n\n\n\n\n\n\n  \n\n\n\n\nMixture of Tokens\n\n\n\n\n\n\n\n\n\n\nWe introduce Mixture of Tokens, a new, fully-differentiable Transformer architecture that builds on top of Mixture of Experts, while avoiding its problems. It achieves the same performance as the vanilla Transformer with \\(3\\times\\) wall-clock speedup and \\(4\\times\\)FLOPS reduction.\n\n\n\n\n\n\nOct 24, 2023\n\n\nSzymon Antoniak *, Sebastian Jaszczur * †, Michał Krutul, Maciej Pióro, Jakub Krajewski, Jan Ludziejewski, Tomasz Odrzygóźdź, Marek Cygan ‡\n\n\n\n\n\n\n  \n\n\n\n\nNeuron Recycling\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJul 11, 2023\n\n\nJakub Krajewski *, Maciej Pióro *, Sebastian Jaszczur †, Marek Cygan ‡\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html",
    "href": "posts/mixture_of_tokens/index.html",
    "title": "Mixture of Tokens",
    "section": "",
    "text": "We introduce Mixture of Tokens, a novel, fully-differentiable Transformer architecture that allows for increasing the number of model parameters while keeping the computation cost constant.\n\nIt avoids problems typical for Mixture of Experts architectures\nIt is compatible with causal and masked Large Language Models\nOur PoC model achieves the same performance as the baseline Transformer with \\(3\\times\\) wall-clock speedup and \\(4\\times\\) FLOPS reduction\nSee the initial arXiv version for reference and citation info"
  },
  {
    "objectID": "posts/mixture_of_tokens/index.html#footnotes",
    "href": "posts/mixture_of_tokens/index.html#footnotes",
    "title": "Mixture of Tokens",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nrouter is also commonly used in MoE literature.↩︎"
  },
  {
    "objectID": "posts/moe_mamba/index.html",
    "href": "posts/moe_mamba/index.html",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "",
    "text": "See also arXiv version."
  },
  {
    "objectID": "posts/moe_mamba/index.html#state-space-models",
    "href": "posts/moe_mamba/index.html#state-space-models",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "State Space Models",
    "text": "State Space Models\nState Space Models (SSMs) form a family of architectures used for sequence modeling. Stemming from the field of control theory, these models can be seen as a combination of RNNs and CNNs (Gu and Dao, 2023). Although they potentially offer considerable benefits, a number of issues have been identified with SSMs (Gu et al., 2022), preventing SSMs from becoming the leading architecture in the task of language modeling. However, recent breakthroughs (Gu et al., 2022; Fu et al., 2023; Smith et al., 2023), have allowed deep SSMs to be scaled to billions of parameters while retaining computational efficiency and strong performance."
  },
  {
    "objectID": "posts/moe_mamba/index.html#mamba",
    "href": "posts/moe_mamba/index.html#mamba",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Mamba",
    "text": "Mamba\nBuilding on SSMs, Mamba (Gu and Dao, 2023) offers linear-time inference (with respect to the context length) and an efficient training process via hardware-aware design. By employing a work-efficient parallel scan, Mamba mitigates the impact of the sequential nature of recurrence, whereas fusing GPU operations removes the requirement to materialize the expanded state. Intermediate states necessary for backpropagation are not saved but instead recomputed during the backward pass, thus reducing memory requirements. The advantages of Mamba over the attention mechanism are especially prominent during inference, as not only the computational complexity is lowered, but also the memory usage is not dependent on the context length.\nMamba addresses the fundamental trade-off between efficiency and effectiveness in sequence models, emphasizing the significance of state compression. Efficient models necessitate a small state, while effective models require a state containing all crucial information from the context. Departing from other SSMs’ requirements of time and input invariance, a selection mechanism is introduced, controlling how information propagates along the sequence dimension. This design choice is inspired by intuition derived from synthetic tasks such as selective copy and induction heads, allowing the model to differentiate and retain essential information while filtering out the irrelevant.\nMamba’s performance is showcased through its ability to efficiently utilize longer contexts (up to 1M tokens), with improved pretraining perplexity as the context length increases. The Mamba model, consisting of a stack of Mamba blocks, achieves very strong performance across diverse domains (NLP, genomics, audio), matching or exceeding the performance of established Transformer models. Thus, Mamba emerges as a promising candidate for a general sequence modeling backbone."
  },
  {
    "objectID": "posts/moe_mamba/index.html#mixture-of-experts",
    "href": "posts/moe_mamba/index.html#mixture-of-experts",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Mixture of Experts",
    "text": "Mixture of Experts\nMixture of Experts (MoE) is a class of techniques that allow drastically increasing the number of parameters of a model without much impact on the FLOPs required for the model’s inference and training. Introduced in (Jacobs et al., 1991), MoE was applied in the context of NLP by (Shazeer et al., 2017).\nMoE models benefit from sparse activation - for each token processed, only a subset of the model’s parameters is used. Due to their computational demands, layers in Transformers have become the standard target of various MoE techniques (Lepikhin et al., 2020; Fedus et al., 2022).\nA number of approaches have been proposed to address the core problem of MoE, i.e., the process of assigning tokens to experts (routing). Two basic routing algorithms include Token Choice (Shazeer et al., 2017) (each token is routed to a constant number of experts \\(K\\)) and Expert Choice (Zhou et al., 2022) (the number of tokens routed to each expert is constant across experts). Switch (Fedus et al., 2022) is a Token Choice architecture that routes each token to a single expert (\\(K=1\\)) and has successfully been used to scale Transformers up to 1.6T parameters. In our experiments, we follow this MoE design.\nMore recently, MoE models have found their way onto the open-source scene (Xue et al., 2023; Fedus et al., 2022). In particular, Mistral has open-sourced Mixtral 8x7B (Mistral, 2023) that fares comparably to LLaMa 2 70B (Touvron et al., 2023) while requiring only around 1/6th of its inference computational budget."
  },
  {
    "objectID": "posts/moe_mamba/index.html#alternative-designs",
    "href": "posts/moe_mamba/index.html#alternative-designs",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Alternative Designs",
    "text": "Alternative Designs\nIn addition to the experiments related to interleaving Mamba with MoE, we also conducted other experiments, modifying the original block design by (Gu and Dao, 2023) to feature conditional computation. We expect this research direction to be important in future attempts to improve the Mamba architecture. We address those experiments in the Appendix, Section Alternative Designs."
  },
  {
    "objectID": "posts/moe_mamba/index.html#training-setup",
    "href": "posts/moe_mamba/index.html#training-setup",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Training Setup",
    "text": "Training Setup\nWe compare 5 different settings: vanilla Transformer, Mamba, Mamba-MLP, MoE and MoE-Mamba. In most Transformers, the feed-forward layer contains \\(8dm^2\\) parameters, whereas (Gu and Dao, 2023) makes Mamba layers smaller (ca. \\(6dm^2\\)) so that two Mamba layers match the combined parameter count of a feed-forward layer and an attention mechanism. To keep the number of active parameters per token roughly the same in Mamba and in our model, we scale down the size of each expert feed-forward layer to \\(6dm^2\\). Excluding embedding and unembedding layers, all models access around 26M parameters per token. We train the models on approximately 6.5B tokens and 100k steps.\nWe train the model using the English C4 dataset (Raffel et al., 2020) on the task of next token prediction. The text is tokenized using GPT2 tokenizer (Radford et al., 2019). LR was tuned for vanilla Mamba (see Appendix, Section and re-used for all other training runs. For a full rundown of hyperparameters, see the hyperparameters table.\n\n\n\nFigure 3: Training loss for a differing number of experts."
  },
  {
    "objectID": "posts/moe_mamba/index.html#results",
    "href": "posts/moe_mamba/index.html#results",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Results",
    "text": "Results\n\n\nTable 1: Results of comparison between different architectures after 100k steps. Note that the parameter counts exclude embedding and unembedding layers.\n\n\n\n\n\n\n\n\n\n\nModel\n# Parameters\n# Active Parameters per Token\nLoss After 100k Steps\n% Steps to Transformer Loss\n% Steps to Vanilla Mamba Loss\n\n\n\n\nTransformer\n25M\n25M\n3.66\n100%\n&gt;100%\n\n\nMamba-MLP\n26M\n26M\n3.56\n38%\n&gt;100%\n\n\nTranformer-MoE\n545M\n25M\n3.54\n42%\n&gt;100%\n\n\nVanilla Mamba\n27M\n27M\n3.51\n30%\n100%\n\n\nMamba-MoE\n416M\n26M\n3.41\n21%\n46%\n\n\n\n\nTable 1 presents the results of training. MoE-Mamba shows a remarkable improvement over the vanilla Mamba model. Notably, MoE-Mamba was able to achieve the same performance as vanilla Mamba in just 46% of training steps. Because the learning rate was tuned for vanilla Mamba (see Appendix, Section LR Tuning, we expect even better performance if the training procedure is optimized for MoE-Mamba. Like (Gu and Dao, 2023), we observe that Mamba-MLP achieves slightly worse performance than vanilla Mamba."
  },
  {
    "objectID": "posts/moe_mamba/index.html#hyperparameters",
    "href": "posts/moe_mamba/index.html#hyperparameters",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Hyperparameters",
    "text": "Hyperparameters\n\nHyperparameters\n\n\nModel\n\n\nTotal Blocks\n8 (16 in Mamba)\n\n\n\\(d_{model}\\)\n512\n\n\nFeed-Forward\n\n\n\\(d_{ff}\\)\n2048 (with Attention) or 1536 (with Mamba)\n\n\nMixture of Experts\n\n\n\\(d_{expert}\\)\n2048 (with Attention) or 1536 (with Mamba)\n\n\nExperts\n32\n\n\nAttention\n\n\n\\(n_{heads}\\)\n8\n\n\nTraining\n\n\nTraining Steps\n100k\n\n\nContext Length\n256\n\n\nBatch Size\n256\n\n\nLR\n1e-3\n\n\nLR Warmup\n1% steps\n\n\nGradient Clipping\n0.5"
  },
  {
    "objectID": "posts/moe_mamba/index.html#sec-alt_designs",
    "href": "posts/moe_mamba/index.html#sec-alt_designs",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Alternative Designs",
    "text": "Alternative Designs\nIn this section we explore three possible designs different than the one presented in Section Architecture. While we don’t present concrete results from those experiments, we think that in such a fast-moving field there is a value in sharing even rough ideas.\nOne of the conducted experiments involved replacing the Output Projection with MoE (Figure 4). The resulting model, which had fewer blocks to match the number of active parameters, achieved similar results to the original Mamba architecture. Similarly, substituting the Conv Projection layer with a MoE layer (Figure 4) yielded similar results to vanilla Mamba, which do not justify the added complexity of conditional computation. We attribute this to the reduction in the number of blocks due to the increase in the effective number of parameters used in each Mamba block by adding the MoE layer.\nAnother idea, inspired by (Chowdhery et al., 2023), was the parallel execution of a Mamba layer and MoE (Figure 4). However, this architecture yielded worse results even compared to vanilla Mamba when matching the number of active parameters per token.\n\n\n\nFigure 4: Diagram of Parallel Mamba+MoE architecture (left) and Mamba Block (right)"
  },
  {
    "objectID": "posts/moe_mamba/index.html#active-parameters-vs-flops",
    "href": "posts/moe_mamba/index.html#active-parameters-vs-flops",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Active Parameters vs FLOPs",
    "text": "Active Parameters vs FLOPs\nIn this work we report the number of active parameters (excluding embedding and unembedding layers) and not the number of floating-point operations (FLOPs), following (Zhou et al., 2022). Both numbers will be roughly similar, but the number of FLOPs is both harder to calculate and less relevant for hardware-aware architecture like Mamba with its optimizations."
  },
  {
    "objectID": "posts/moe_mamba/index.html#sec-lr_tuning",
    "href": "posts/moe_mamba/index.html#sec-lr_tuning",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Learning Rate Tuning",
    "text": "Learning Rate Tuning\nDue to computational limits we couldn’t tune learning rate for all of the variants of the architecture. In this preliminary investigation, we decide to tune the learning rate specifically for vanilla Mamba and re-use it for other models. This approach may only underestimate the gains of over vanilla Mamba, therefore it does not impact the main conclusions.\n\n\n\nLR\nLoss After 100k Steps\n\n\n\n\n1e-4\n3.68\n\n\n2e-4\n3.60\n\n\n5e-4\n3.53\n\n\n1e-3\n3.51\n\n\n2e-3\n3.55\n\n\n5e-3\nunstable\n\n\n\n\n\n\nFigure 5: LR tuning runs for Mamba. 5e-3 is not included in the plot, as it was unstable."
  },
  {
    "objectID": "posts/moe_mamba/index.html#reproducibility",
    "href": "posts/moe_mamba/index.html#reproducibility",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Reproducibility",
    "text": "Reproducibility\nThe codebase used to run the experiments is available at our GitHub repo: https://github.com/llm-random/llm-random."
  },
  {
    "objectID": "posts/moe_mamba/index.html#citation-information-1",
    "href": "posts/moe_mamba/index.html#citation-information-1",
    "title": "MoE-Mamba: Efficient Selective State Space Models with Mixture of Experts",
    "section": "Citation Information",
    "text": "Citation Information\nPlease cite the arXiv version of this work."
  },
  {
    "objectID": "posts/neuron_recycling/index.html",
    "href": "posts/neuron_recycling/index.html",
    "title": "Neuron Recycling",
    "section": "",
    "text": "Sparse neural networks have garnered attention due to their theoretical promise of lowered computational demands and memory savings. However, to this date, the theoretical gains have largely failed to materialize due to the lack of hardware support for this kind of models. In this work, we explore the idea of neuron recycling which is inspired by pruning - a method often employed to induce sparsity in neural networks. We also present lessons we have learned along the way.\n\nIntroduction\nPruning is a well-established technique used to sparsify neural networks (LeCun et al., 1989; Han et al., 2015). It relies on the fact that typically a large part of a trained neural network can be masked without impacting the accuracy of the network, albeit often requiring additional fine-tuning in order to regain some lost performance. Despite multiple works proposing various neuron-selection criteria for pruning, magnitude-based pruning remains a viable option. The Lottery Ticket Hypothesis (Frankle and Carbin, 2019) is a major finding on the way to explain how the initialization impacts neural networks. The main point of the LTH is that through iterative pruning, performant subnetworks depending on the initialization can be found in neural networks. Those well-initialized network fragments are the namesake of LTH (the “lottery tickets”). Although some notions of the original LTH paper have been challenged (Frankle et al., 2020), it has remained the subject of active research and a motivation for our work. \nBy combining the two ideas (pruning and LTH) we arrive at a new potential technique for raising neural network performance. If we are able to remove parts of the network without hurting the performance (pruning) and the fitness of a part of a network is determined at initialization, perhaps we could re-initialize the unnecessary network parts (i. e. draw more “lottery tickets”), leading to a better-performing network.\n\n\n\nPreliminaries\nBefore we move to the presentation of our experiments and findings, let’s first discuss the training setup, define key terminology, and go over the basics.\n\nModel and training setup\nIn our project, we are focusing on the Transformer (Vaswani et al., 2017), since it’s a major architecture across different domains (Touvron et al., 2023; Dosovitskiy et al., 2021). For the specific type of the model, we are working on encoder-only BERT (Devlin et al., 2019). Taking into consideration available computational resources and expected iteration time (we wanted to try as many options as possible), we decided to opt for the BERT Medium configuration (with \\(d_\\text{model}=512\\) and \\(8\\) attention heads). We focus on the feed-forward layer, because it is the most computationally demanding part of commonly-used transformer models and, in large models, it contains the majority of the parameters. At the same time, the amount of research focusing on the attention mechanism is overwhelming, suggesting that the feed-forward layer is a relatively unexplored area.\nWe trained the model for \\(80{,}000\\) steps (around compute-optimal number of train samples for this size of model) , with Adam (Kingma and Ba, 2017), using batch size of \\(256\\) and learning rate of \\(0.001\\). We used Kaiming uniform (He et al., 2015) initialization in the feed-forward layer. For the training objective, we use masked language modeling loss, as described in (Devlin et al., 2019).\nIn the following part of this post, we will often use the terms neuron and magnitude. Below are the definitions we employ.\nNeuron. In the Transformer, feed-forward layer consists of two linear layers, with a nonlinearity in between. The first layer maps the input vector from \\(d_\\text{model}\\) to \\(d_\\text{ff}\\) dimension, and the second one from \\(d_\\text{ff}\\) back to \\(d_\\text{model}\\). Typically, \\(d_\\text{ff}\\) is four times greater than \\(d_\\text{model}\\). By neuron, we will understand all weights interacting with a particular coordinate in the \\(\\mathbb{R}^{d_\\text{ff}}\\) activation vector. In the torch implementation, a neuron’s weights are the parameters in a given row of the first feed-forward matrix and in the corresponding column in the second one. \nMagnitude. To calculate magnitude of a weight, we will use its absolute value. As the magnitude of the \\(i\\)-th neuron we will use value of the expression \\[M= \\lVert x_i^{in}\\rVert \\cdot \\lVert x_i^{out}\\rVert,\\] where:\n\n\\(\\lVert x_i^{in}\\rVert\\) - \\(l_2\\) norm of the \\(i\\)-th row in the weight matrix of the input linear layer\n\\(\\lVert x_i^{out}\\rVert\\) - \\(l_2\\) norm of the \\(i\\)-th column in the weight matrix of the output linear layer.\n\n\n\nPruning\nPruning is a technique used to induce sparsity and decrease the parameter count in a neural network. In simple terms, it means deleting the least important neurons (structured pruning) or weights (unstructured pruning). A typical implementation realizes this by either multiplying the output of the deleted neurons by 0 or setting the weights of the neuron to 0. A widely-used proxy for the importance of a neuron or weight is its magnitude. Notably, the network can still be trained even if the architecture doesn’t contain feed-forward layer, because the model can learn to represent the same trainsformation using only Attention. However, without FF the training time needed to achieve the same performance is much longer.\n\nBelow we present a plot with loss curves of the model gradually pruned at the FF layer, starting in step \\(10{,}000\\), such that the layer is completely masked in the end of the training. In this case, we perform structured pruning, i.e. we mask the whole neurons. As a comparison, we also add regular model and the one without feed-forward layer.\n\n\n\n\n                                                    \n\n\nInterestingly, the effect of pruning can’t be visible for a significant fraction of the training time. It’s also worth noting that in the end the model without FF Layer performs slightly better than the pruned one. This is because in the first case, Attention was trained to adjust  from the very beginning of the training.\n\n\nThe goal\n\n\nThe end-goal of the project was to create a method that would allow us to make better use of the parameters in the feed-forward layer. In this context, a natural question arises - against what baseline should our results be compared? To answer this question, we trained the model with differing dimensionalities of the feed-forward layer. The results are presented below.\n\n\n\n\n                                                    \n\n\nThe true BERT Medium configuration has \\(d_\\text{ff}=2048\\). As we might expect, the performance drops when \\(d_\\text{ff}\\) is decreased and improves when \\(d_\\text{ff}\\) is increased. In particular, the model with the feed-forward layer two times wider than the baseline achives the same loss in approximately 20% fewer steps. This shows the direction for our project: through neuron recycling, we want the model to behave more like the one with larger \\(d_\\text{ff}\\) by making a better use of available parameters.\n\n\n\nUnderstanding neuron magnitudes\nOne of the key inspirations for our work was structured pruning, where neuron/filter magnitude is often chosen as the measure of significance (Li et al., 2017; He et al., 2018). We were interested in how this metric evolves during the training process. At first, we thought a histogram of neuron magnitudes would exhibit a normal distribution. However, our experiments showed something different. The following graph shows evolution of neuron magnitudes throughout the training process. \n\n\n\n\n    \n\n\n\n    \n        \n        \n    \n\n\n\n\nIn the early stages of training, the neurons split into two groups, one with much lower magnitudes than the other. This finding opens up many discussion topics. One could guess that the neurons belonging to the group with smaller magnitudes potentially don’t hold much importance and can be pruned freely. However, it’s also possible that these neurons, though small, play a critical role in specific tasks.\nThis phenomenon is not limited to the first layer of the network. We have observed it in all layers, apart from the last one, as shown in the following plot.\n\n\n\n\n    \n\n\n\n    \n        \n        \n    \n\n\n\n After examining these experiments, we were trying to understand why in the early layers we observed two distinct groups of neurons, categorized by their magnitudes. One possible explanation is that certain parts of the network receive a smaller signal and are slower to improve in training. We designed an experiment to check that. We periodically froze all parts of the network except for the feed-forward component and continued to train it for several batches of data. We hypothesized that in this scenario, weaker neurons might catch up, resulting in a more even distribution. We called this procedure overtraining  feed-forward layer. It’s important to note that this approach is impractical and computationally heavy, but we wanted to use it for the purpose of illustration. The results are depicted in the following plot.\n\n\n\n\n                                                    \n\n\n\n\nWe can see that the group of weaker  neurons has moved to the right after performing additional training of the FF part. However, neurons still form two distinct groups: overtraining the whole layer is not enough for the weaker ones to catch up. In the next experiment, we have examined the scenario of retraining only small magnitude neurons, only large magnitude neurons and random subsets. How does it affect the performance? The results are depicted on the following plot.\n\n\n\n\n\n                                                    \n\n\n\nOvertraining only the smallest neurons yields the best results when compared to reinforcing high-magnitude ones. Notably, overtraining the small ones gives similar gains in performance to working on the entire layer! Contrarily, ampifying the highest ones gives gains comparable to no overtraining at all. This provides a compelling argument in favor of our technique, suggesting that we can achieve significant gain by improving the the functionality of low-magnitude neurons. \n\nMagnitudes in openly available pretrained models\n\nSo far, we have performed a series of experiments in one particular setting. We were curious to see how our observations would translate to well-established, large-scale foundation models like BERT Large or T5.\n\n\n\n\n                                                    \n\n\n\n\n\n                                                    \n\n\nThere is a clear difference between the plots above. Magnitudes in T5 seem similar to those in our smaller models, while BERT Large presents a more balanced distribution. What could account for these variations? It turns out that an important difference between the training process of these models was the use of weight decay. Intuitively, adding a component to the loss function that corresponds to the magnitudes of weights, helps balance the magnitudes of neurons. In the following part of the article we will further explore the idea of explicitly changing the magnitude distribution through modification of the loss function. \nFindings presented above support the idea of exploring neuron recycling and offer a good foundation for further experiments. In the next sections, we will present results on this topic and share our insights.\n\n\n\nRecycling\n\nThe central part of our work was a method we called neuron recycling. The process consists of three phases, repeated periodically: training, selection and reinitialization.\n\n\n\n\n\n\nIn the training phase, the model is trained to predict masked tokens (masked language modelling).\nIn the selection phase, the least important neurons are determined, where the baseline criterion is neuron magnitude.\nIn the reinitialization phase, new weights are assigned to neurons.\n\nAlthough this procedure is conceptually simple, it allows for many degrees of freedom. Here are some choices that can be made:\n\nThe number of training steps before consecutive selection / reinitialization phases\nThe percentage of recycled neurons\nSelection / reinitialization strategies\n\nAfter examining the pruning literature, we found that the simple magnitude-based approach works well in most cases (Blalock et al., 2020; Maene et al., 2021). Moreover, it is easy to implement and computationally efficient. This approach is also grounded in our experiments. Below we present the training curves for the model pruned gradually using different criterions: high/low magnitude and random neurons.\n\n\n\n\n                                                    \n\n\n\n\nAs you can see, removing low magnitude neurons hurts the model the least, and removing high magnitude ones cases the largest loss. This is a good argument that this criterion correlates well with neuron significance.\n\nBaseline recycling\nThe most straightforward reinitialization scheme is to sample the weights of the reinitialized neurons from the initial distribution. After examining the performance of this solution, we could not see any difference between recycling and vanilla training.\n\n\n\n\n                                                    \n\n\nAs a sanity check, we have examined the histogram presenting the number of times each neuron was recycled, discovering that the same small subset of neurons was being reinitialized over and over during training.\n\n\n\n\n                                                    \n\n\nAs we have seen in the previous section, on average magnitude of neurons grows throughout the training. Therefore, sampling from the initial distribution will cause the reycycled neurons to have even lower magnitudes. As an effect, they are unable to catch up to before another selection phase. Thus, the recycled neurons are caught up in a vicious cycle in which they are always recycled before achieving high magnitude.\n\n\n\nImmunity\nTo address the problem we observed in the previous approach, we tried another strategy - recycling with immunity. The idea here is to encourage diverse recycling by making each recycled neuron immune to further recycling for some predefined number of steps. We hypothesized that a reinitialized neuron needs some time to grow, which was not possible in the initial setting. The following plot illustrates that immunity prevents the recycled neurons from being catched in a vicious cycle.\n\n\n\n\n                                                    \n\n\nHigher number of immunity rounds (i.e. number of selection phases when a newly recycled neuron can’t be chosen) causes more neurons to be reinitialized at least once. Unfortunately, this eventually causes well-behaving parts of the network to be chosen for recycling. As an effect, the performance drops.\n\n\n\n\n                                                    \n\n\n\n\nModifying reinitialization distribution\nAs we have pointed out before, magnitude and weight distribution drifts away from the initial distribution as the training progresses. However, during our initial attempts, we initialized the weights sampling from the initial distribution. To fix this issue, we decided to try out another weight sampling technique. In this approach we used the normal distribution with mean and standard deviation equal to the mean and standard deviation of all the weights in the respective layer. This approach, like immunity, eliminated the vicious cycle  problem.\n\n\n\n\n                                                    \n\n\nHowever, this process introduced a lot of noise with adverse effect on the model’s loss.\n\n\n\n\n                                                    \n\n\n\n\nCopying existing neurons\nIn the problem of growing  or warm starting  neural networks, the aim is to gradually add new weights to the model througout the training. In the case of Large Language Models, this topic is mentioned in the Gopher (Rae et al., 2022) paper. In particular, the authors describe multiple strategies for adding new neurons to the feed-forward layer and conclude that copying existing ones (with an addition of small noise) seems to give the best results. We tried this approach in our setting, but couldn’t observe better performance.\n\n\n\n\n                                                    \n\n\n\n\nSmooth recycling\nWe came up with the hypothesis that neuron recycling could actually work better if it didn’t have sudden and discrete changes in neuron values. These sharp changes plausibly destabilize the training process. This issue is clear in sudden loss spikes, such as those observed in the recycling with modified distribution part. It may be particularly problematic that the statistics of the optimizer need to adjust to the new values, but they don’t have time to do that. To make the recycling process smoother, we modified our strategy to linearly interpolate between the old weights of the neuron and the their target values. More precisely, the new value assigned for a recycled weight in this approach is \\[ x = \\alpha \\ x_{target} + (1-\\alpha) \\ x_{old},\\] where:\n\n\\(x_{target}\\) - target value chosen for the weight; this parameter is trainable right away\n\\(x_{old}\\) - old value of the weight before recycling; this value is no longer trainable\n\\(\\alpha\\) - non-trainable parameter, changed linearly from 0 to 1 over 1000 steps following the selection phase.\n\nWith this modification, we saw that the training loss became smoother. However, the solution was still not able to beat the baseline. \n\n\n\n\n                                                    \n\n\n\n\n\nTangent - Midpoint Loss\nWhile inspecting the distribution of neuron magnitudes during the training, we can notice that it is quite uneven - a large percentage of neurons remains small, and the distribution is right-skewed. Since the goal of our project was to reduce the number of low-quality, i.e., small neurons, we came up with a pretty risky solution: Midpoint Loss. The idea was to introduce an additional loss term that would encourage neuron growth and “even-ness” of the magnitude distribution. The general equation for the midpoint loss is\n\\[ Loss = \\sum_{l = 1}^{L} \\sum_{n = 1}^{d_\\text{ff}} \\ d\\left( M_{l,n}, \\ sg\\left(\\bar{M}_{l}\\right) \\right)\\] where:\n\n\\(M_{l,n}\\) - magnitude of th \\(n^{\\text{th}}\\) neuron in the \\(l^{\\text{th}}\\) layer. In some experiments we used the \\(log\\) of the magnitude\n\\(\\bar{M}_{l}\\) - average neuron magnitude in layer \\(l\\), typically calculated as arithmetic mean. In some experiments, median was used instead due to its robustness to outliers\n\\(sg\\) - stops the gradient from flowing through\n\\(d\\) - distance function, typically \\(l_1\\) or \\(l_2\\)\n\\(d_\\text{ff}\\) - number of neurons in a layer. In some experiments, we only summed over neurons with magnitude below the average magnitude of the layer, to encourage growth of small neurons, without thwarting the growth of the large ones\n\\(L\\) - number of layers.\n\nSince this idea is quite similar to weight decay, we decided not to optimize this term with Adam, but to split it from the task loss and optimize it using simple gradient descent - a similar technique is used in AdamW (Loshchilov and Hutter, 2019) to incorporate weight decay loss term.\n\n\n\n\n                                                    \n\n\n\nMidpoint loss achieved the goal of boosting the small neurons, however it failed to make a positive impact on the model’s performance.\n\n\n\n\n                                                    \n\n\n\n\n\n\nConclusion\nIn this work, we described our attempts to integrate pruning and Lottery Ticket Hypothesis via neuron recycling. Although we were not able to beat the baseline using our technique, we explored the topic thoroughly and conducted a series of experiments, providing valuable insights into the inner workings of a transformer. We hope that our findings may be a helpful resource for future studies and investigations in this area.   \n\n\nReferences\n\n\nDavis Blalock, Jose Javier Gonzalez Ortiz, Jonathan Frankle, and John Guttag. 2020. What is the state of neural network pruning?\n\n\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: Pre-training of deep bidirectional transformers for language understanding.\n\n\nAlexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, and Neil Houlsby. 2021. An image is worth 16x16 words: Transformers for image recognition at scale.\n\n\nJonathan Frankle and Michael Carbin. 2019. The lottery ticket hypothesis: Finding sparse, trainable neural networks.\n\n\nJonathan Frankle, Gintare Karolina Dziugaite, Daniel Roy, and Michael Carbin. 2020. Linear mode connectivity and the lottery ticket hypothesis. In Hal Daumé III and Aarti Singh, editors, Proceedings of the 37th international conference on machine learning, volume 119, pages 3259–3269. PMLR.\n\n\nSong Han, Jeff Pool, John Tran, and William Dally. 2015. Learning both weights and connections for efficient neural network. In C. Cortes, N. Lawrence, D. Lee, M. Sugiyama, and R. Garnett, editors, Advances in neural information processing systems, volume 28. Curran Associates, Inc.\n\n\nKaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2015. Delving deep into rectifiers: Surpassing human-level performance on ImageNet classification.\n\n\nYang He, Guoliang Kang, Xuanyi Dong, Yanwei Fu, and Yi Yang. 2018. Soft filter pruning for accelerating deep convolutional neural networks.\n\n\nDiederik P. Kingma and Jimmy Ba. 2017. Adam: A method for stochastic optimization.\n\n\nYann LeCun, John Denker, and Sara Solla. 1989. Optimal brain damage. In D. Touretzky, editor, Advances in neural information processing systems, volume 2. Morgan-Kaufmann.\n\n\nHao Li, Asim Kadav, Igor Durdanovic, Hanan Samet, and Hans Peter Graf. 2017. Pruning filters for efficient ConvNets.\n\n\nIlya Loshchilov and Frank Hutter. 2019. Decoupled weight decay regularization.\n\n\nJaron Maene, Mingxiao Li, and Marie-Francine Moens. 2021. Towards understanding iterative magnitude pruning: Why lottery tickets win.\n\n\nJack W. Rae, Sebastian Borgeaud, Trevor Cai, Katie Millican, Jordan Hoffmann, Francis Song, John Aslanides, Sarah Henderson, Roman Ring, Susannah Young, Eliza Rutherford, Tom Hennigan, Jacob Menick, Albin Cassirer, Richard Powell, George van den Driessche, Lisa Anne Hendricks, Maribeth Rauh, Po-Sen Huang, et al. 2022. Scaling language models: Methods, analysis & insights from training gopher.\n\n\nHugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timothée Lacroix, Baptiste Rozière, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, and Guillaume Lample. 2023. LLaMA: Open and efficient foundation language models.\n\n\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Blog of LLM-Random research group in IDEAS NCBR, started in mid-2022 by Sebastian Jaszczur. Team members, in the order of joining, listed below. We are happy to collaborate with outside institutions and people.\n\nSebastian Jaszczur    \nMarek Cygan , as advisor\nJakub Krajewski   \nSzymon Antoniak   (past member)\nMaciej Pióro    \nTomasz Odrzygóźdź (past member)\nJan Ludziejewski    \nMichał Krutul  \nKamil Ciebiera \nKrystian Król\n\nPublic repositories of the group are available at on GitHub.\n\nResearch Statement\nWe are interested in improving the state-of-the-art in Large Language Models, as we believe this to be the most impactful research direction. We want to do this by improving the efficiency of those models during both training and inference. Among the techniques we explore in our work are: Mixture-of-Experts (see Mixture of Tokens), fast/speculative decoding (blogpost coming soon), and improving parameter efficiency (see Neuron Recycling)."
  }
]