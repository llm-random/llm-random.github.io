---
title: "Neuron Recycling"
author:
    -   name: Jakub Krajewski \*
        equal-contributor: true
        affiliations:
        -   ref: ideas
        -   ref: uow
    -   name: Maciej Pióro \*
        equal-contributor: true
        affiliations:
        -   ref: ideas
        -   ref: uow
    -   name: Sebastian Jaszczur †
        affiliations:
        -   ref: ideas
        -   ref: uow
    -   name: Marek Cygan ‡
        affiliations:
        -   ref: uow
affiliations:
    -   id: ideas
        name: IDEAS NCBR
    -   id: uow
        name: University of Warsaw
date: "2023-07-11"
bibliography: bibliography.bib
csl: apa.csl
# date-modified: "2023-07-11"
categories: []
image: "logo1.png"
format:
  html:
    template-partials:
    - title-block.html
    include-in-header:
      - text: |
          <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.20.0.min.js"/>
---

Sparse neural networks have garnered attention due to their theoretical promise of lowered computational demands and memory savings. However, to this date, the theoretical gains have largely failed to materialize due to the lack of hardware support for this kind of models. In this work, we explore the idea of neuron recycling which is inspired by pruning - a method often employed to induce sparsity in neural networks. We also present lessons we have learned along the way.


# Introduction

Pruning is a well-established technique used to sparsify neural networks [@NIPS1989_6c9882bb; @NIPS2015_ae0eb3ee]. It relies on the fact that typically a large part of a trained neural network can be masked without impacting the accuracy of the network, albeit often requiring additional fine-tuning in order to regain some lost performance. Despite multiple works proposing various neuron-selection criteria for pruning, magnitude-based pruning remains a viable option. The Lottery Ticket Hypothesis [@frankle2019lottery] is a major finding on the way to explain how the initialization impacts neural networks. The main point of the LTH is that through iterative pruning, performant subnetworks depending on the initialization can be found in neural networks. Those well-initialized network fragments are the namesake of LTH (the “lottery tickets”). Although some notions of the original LTH paper have been challenged [@pmlr-v119-frankle20a], it has remained the subject of active research and a motivation for our work. <!--many citations to this part-->

By combining the two ideas (pruning and LTH) we arrive at a new potential technique for raising neural network performance. If we are able to remove parts of the network without hurting the performance (pruning) and the fitness of a part of a network is determined at initialization, perhaps we could re-initialize the unnecessary network parts (i. e. draw more “lottery tickets”), leading to a better-performing network.

<!-- Obrazek w rodzaju "LTH + Pruning + Dense Model = Recycling" -->

# Preliminaries

Before we move to the presentation of our experiments and findings, let's first discuss the training setup, define key terminology, and go over the basics.

### Model and training setup
In our project, we are focusing on the Transformer [@transformer], since it's a major architecture across different domains [@touvron2023llama; @dosovitskiy2021image]. For the specific type of the model, we are working on encoder-only BERT [@devlin2019bert]. Taking into consideration available computational resources and expected iteration time (we wanted to try as many options as possible), we decided to opt for the BERT Medium configuration (with $d_\text{model}=512$ and $8$ attention heads). We focus on the feed-forward layer, because it is the most computationally demanding part of commonly-used transformer models and, in large models, it contains the majority of the parameters. At the same time, the amount of research focusing on the attention mechanism is overwhelming, suggesting that the feed-forward layer is a relatively unexplored area.

We trained the model for $80{,}000$ steps (around compute-optimal number of train samples for this size of model) <!-- może dodać więcej wytłumaczenia -->, with Adam [@kingma2017adam], using batch size of $256$ and learning rate of $0.001$. We used Kaiming uniform [@he2015delving] initialization in the feed-forward layer.

<!--It has been shown citation that the initialization of the weights in neural networks is of utmost importance to the convergence of the network. In all our experiments, we initialized the linear layers using the following distribution: <latex> as per citation.-->

In the following part of this post, we will often use the terms _neuron_ and _magnitude_. Below are the definitions we employ.

* **Neuron** <br/>
    In the Transformer, feed-forward layer consists of two linear layers, with a nonlinearity in between. The first layer maps the input vector from $d_\text{model}$ to $d_\text{ff}$ dimension, and the second one from $d_\text{ff}$ back to $d_\text{model}$. Typically, $d_\text{ff}$ is four times greater than $d_\text{model}$. By neuron, we will understand all weights interacting with a particular coordinate in the $\mathbb{R}^{d_\text{ff}}$ activation vector. In the `torch` implementation, a neuron's weights are the parameters in a given row of the first feed-forward matrix and in the corresponding column in the second one.
<!-- tUTAJ FAJNIE BY BYŁO DODAĆ JAKIŚ RYSUNEK, KTÓRY BY TO POKAZYWAŁ -->

* **Magnitude** <br/>
    To calculate magnitude of a weight, we will use its absolute value. As the magnitude of a neuron we will use value of the expression $M=\sqrt{\sum{w_{in}^2} \sum{w_{out}^2}}$. <!--citation and some explanation-->
<!-- Dać wyjaśnienie, dlaczego używamy takiej definicji magnitude -->

### Pruning
Pruning is a technique used to induce sparsity and decrease the parameter count in a neural network. In simple terms, it means deleting the least important neurons (structured pruning) or weights (unstructured pruning). A typical implementation realizes this by either multiplying the output of the deleted neurons by 0 or setting the weights of the neuron to 0. A widely-used proxy for the importance of a neuron or weight is its magnitude. <!-- You may find it counterintuitive, but we can even remove the whole FF Layer and the model will still work. This is because model can learn to represent the same transformation using attention. -->


<!--improve this paragraph--> Below we present a plot with loss curves of the model gradually pruned at the FF layer, starting in step $10{,}000$, such that the layer is completely masked in the end of the training. As a comparison, we also add regular model and the one without feed-forward layer.

{{< include plots_jk/_pruning_masked_b.qmd >}}

Interestingly, the effect of pruning can't be visible for a significant fraction of the training time. It's also worth noting that in the end the model without FF Layer performs slightly better than the pruned one. This is because in the first case, Attention was trained to _adjust_&nbsp; from the very beginning of the training.

### The goal
<!--
Napisać o modelu i dff-ach.
The main goal of our work was to improve the performance of a transformer model by recycling neurons. Typically the $d_\text{ff}$ in the transformer
-->
<!--improve this paragraph-->The end-goal of the project was to create a method that would allow us to make better use of the parameters in the feed-forward layer. In this context, a natural question arises - against what baseline should our results be compared? To answer this question, we trained the model with differing dimensionalities of the feed-forward layer. The results are presented below. The true BERT Medium configuration has $d_\text{ff}=2048$, and, as expected, the model's performance drops when the $d_\text{ff}$ is decreased and increases when the $d_\text{ff}$ is increased.

{{< include plots_mp/_dffs_loss.qmd >}}


# Understanding neuron magnitudes {#sec-magn}

One of the key inspirations for our work was structured pruning, where neuron/filter magnitude is often chosen as the measure of significance [@li2017pruning; @he2018soft]. We were interested in how this metric evolves during the training process. At first, we thought a histogram of neuron magnitudes would exhibit a normal distribution. However, our experiments showed something different. The following graph shows evolution of neuron magnitudes throughout the training process. <!-- dodać zdanie, że większość layerów wygląda jak layer 1 -->

{{< include plots_jk/_magnitudes.qmd >}}

<br/>

In the early stages of training, the neurons split into two groups, one featuring much lower magnitudes than the other. This finding opens up a multitude of discussion topics. It can be speculated that the neurons belonging to the group with smaller magnitudes potentially don't hold much importance and can be pruned freely. However, it's also possible that these neurons, though small, play a critical role in specific tasks.

This phenomenon is not limited to the first layer of the network. We have observed it in all layers, apart from the last one, as shown in the following plot.

{{< include plots_jk/_layer8.qmd >}}

<br/>
 After examining these experiments, we were trying to understand why in the early layers we observed two distinct groups of neurons, categorized by their magnitudes. One possible explanation is that certain parts of the network receive a smaller signal and are slower to improve in training. We designed an experiment to check that.
 We periodically froze all parts of the network except for the feed-forward component and continued to train it for several batches of data. We hypothesized that in this scenario, weaker neurons might _catch up,_ resulting in a more even distribution. We called this procedure _overtraining_&nbsp; feed-forward layer. It's important to note that this approach is impractical and computationally heavy, but we wanted to use it for the purpose of illustration. The results are depicted in the following plot.

{{< include plots_jk/_full_ret.qmd >}}

<br/>

<!--improve-->We can see that the group of "weaker" neurons has moved to the right after performing additional training of the FF part. However, neurons still form two distinct groups: overtraining the whole layer is not enough for the weaker ones to catch up. In the next experiment, we have examined the scenario of retraining only small magnitude neurons, only large magnitude neurons and random subsets. How does it affect the performance? The results are depicted on the following plot.

<!-- dać plot z magnitudami dla wszystkich wersji overtrainingu -->

{{< include plots_jk/_overtrain_loss.qmd >}}

<!--improve-->Overtraining only the smallest neurons yields the best results when compared to reinforcing high-magnitude ones. Notably, overtraining the small ones gives similar gains in performance to working on the entire layer! Contrarily, ampifying the highest ones gives gains similar to no overtraining at all. This provides a compelling argument in favor of our technique. <!--explain why-->

### Magnitudes in openly available pretrained models
<!-- uniknąć "small architectures", napisać, że chcemy się porównać z dużymi, dostępnymi gdzieś modelami -->
So far, we have performed a series of experiments on relatively small architectures. We were curious to see how our observations would translate to well-established, large-scale foundation models like BERT Large or T5.

{{< include plots_mp/_bert_ff12.qmd >}}
{{< include plots_mp/_t5_ff5.qmd >}}

There is a clear difference between the plots above. Magnitudes in T5 seem similar to those in our smaller models, while BERT presents a more balanced distribution. What could account for these variations? We discovered that the use of weight decay in BERT Large plays a significant role. This simple but widely used technique has an important impact on the distribution. <!--explain more-->

These findings support the idea of exploring neuron recycling and offer a good foundation for further experiments. In the next sections, we will present results on this topic and share our insights.


# Recycling
<!-- ujednolicić czas jakiego używamy (is / was / will) -->
The central part of our work was a method we called neuron recycling. The process consists of three phases, repeated periodically: training, selection and reinitialization.

![](diagram.png){width=60% fig-align="center"}

* In the training phase, the model is trained to predict masked tokens (masked language modelling).
* In the selection phase, the least important neurons are determined, where the baseline criterion is neuron magnitude
* In the reinitialization phase, new weights are assigned to neurons.

Although this procedure is conceptually simple, it allows for many degrees of freedom. Here are some choices that can be made:

* The number of training steps before consecutive selection / reinitialization phases
* The percentage of recycled neurons
* Selection / reinitialization strategies

After examining the pruning literature, we found that the simple magnitude-based approach works well in most cases [@blalock2020state; @maene2021understanding]. It is also easy to implement and computationally efficient. This approach is also grounded in our experiments. Below we present the training curves for the model pruned gradually using different criterions: high/low magnitude and random neurons.

{{< include plots_jk/_pruning.qmd >}}
<!-- spróbować dać drugą oś OX - z procentami wyprunowacyh neuiornów -->

<!--more comment on this-->As you can see, removing low magnitude neurons hurts the model the least, and removing high magnitude ones cases the largest loss. This is a good argument that this criterion correlates well with neuron significance.

### Baseline recycling

The most straightforward reinitialization scheme is to sample the weights of the reinitialized neurons from the initial distribution. After examining the performance of this solution, we could not see any difference between recycling and vanilla training.

{{< include plots_mp/_vc_vs_baseline.qmd >}}

As a sanity check, we have examined the histogram presenting the number of times each neuron was recycled, discovering that the same small subset of neurons was being reinitialized over and over during training.

{{< include plots_mp/_vs_histogram.qmd >}}

As we have seen in the [previous section](#sec-magn), on average magnitude of neurons grows throughout the training. Therefore, sampling from the initial distribution will cause the reycycled neurons to have even lower magnitudes. As an effect, they are unable to catch up to before another selection phase. Thus, the recycled neurons are caught up in a _vicious cycle_ in which they are always recycled before achieving high magnitude.

<!--spróbować zrobić diagram z `vicious cycle`-->

### Immunity

To address the problem we observed in the previous approach, we tried another strategy - recycling with _immunity_. The idea here is to encourage diverse recycling by making each recycled neuron immune to further recycling for some predefined number of steps. We hypothesized that a reinitialized neuron needs some time to grow, which was not possible in the initial setting. The following plot illustrates that immunity prevents the recycled neurons from being catched in a vicious cycle.

{{< include plots_mp/_7vs3_histogram.qmd >}}

Higher number of immunity rounds (i.e. number of selection phases when a newly recycled neuron can't be chosen) causes more neurons to be reinitialized at least once. Unfortunately, this eventually causes well-behaving parts of the network to be chosen for recycling. As an effect, the performance drops.

{{< include plots_mp/_7vs3vsBaseline_loss.qmd >}}

### Modifying reinitialization distribution {#sec-distr}

As we have pointed out before, magnitude and weight distribution drifts away from the initial distribution as the training progresses. However, during our initial attempts, we initialized the weights sampling from the initial distribution. To fix this issue, we decided to try out another weight sampling technique. In this approach we used the normal distribution with mean and standard deviation equal to the mean and standard deviation of all the weights in the respective matrix. This approach, like immunity, eliminated the _vicious cycle _ problem.

{{< include plots_mp/_plot_current_recycling_histogram.qmd >}}

However, this process introduced a lot of noise with adverse effect on the model's loss.

{{< include plots_mp/_plot_init_vs_current.qmd >}}

### Copying existing neurons
<!-- At this stage of our project, we gained interest in the topic of growing neural networks. Intuitively, this problem has a similar part, in which we want to add new neurons or weights. In the case of Large Language Models, the topic is mentioned in the Gopher paper. The authors describe that for their experiments, copying existing neurons was the best strategy. We have also tried it, but without positive results. -->

Inspired by the Gopher [@rae2022scaling] paper, we have also tried to copy existing neurons while adding some noise to their weights. This approach was also unsuccessful.

<!-- przepisać to lepiej -->

{{< include plots_jk/_copying.qmd >}}

### Smooth recycling

We came up with the hypothesis that neuron recycling could actually work better if it didn't have sudden and discrete changes in neuron values. These sharp changes plausibly destabilize the training process. This issue is clear in sudden loss spikes, such as those observed in the [recycling with modified distribution](#sec-distr) part. It may be particularly problematic that the statistics of the optimizer need to adjust to the new values, but they don't have time to do that. To make the recycling process _smoother_, we modified our strategy to linearly interpolate between the old weights of the neuron and the their target values. More precisely, the new value assigned for a recycled weight was
$$ x = \alpha \ x_{target} + (1-\alpha) \ x_{old},$$
where:

* $x_{target}$ - target value chosen for the weight; this parameter is trainable right away
* $x_{old}$ - old value of the weight before recycling; this value is no longer trainable
* $\alpha$ - non-trainable parameter, changed linearly from 0 to 1 over 1000 steps following the selection phase.

With this modification, we saw that the training loss became smoother. However, the solution was still not able to beat the baseline.
<!-- wyjaśnić na czym polega linear interpolation i dodać legendę do wykresu-->

{{< include plots_jk/_smooth.qmd >}}

# Tangent - Midpoint Loss

While working towards the main goal of the project, we started investigating the distribution of neuron magnitudes during the training. We noticed that the magnitude distribution is quite uneven - a large percentage of neurons remains small, and the distribution is right-skewed.
Since the goal of our project was to reduce the number of low-quality, i.e., small neurons, we came up with a pretty risky solution<!--explain why risky-->: Midpoint Loss.
The idea was to introduce an additional loss term that would encourage neuron growth and "even-ness" of the magnitude distribution. The general equation for the midpoint loss is<!--comment the latex + was or is?-->

$$ Loss = \sum_{l = 1}^{L} \sum_{n = 1}^{d_\text{ff}} \ d\left( M_{l,n}, \ sg\left(\bar{M}_{l}\right) \right)$$
where:

* $M_{l,n}$ - magnitude of th $n^{\text{th}}$ neuron in the $l^{\text{th}}$ layer. In some experiments we used the $log$ of the magnitude
* $\bar{M}_{l}$ - average neuron magnitude in layer $l$, typically calculated as arithmetic mean. In some experiments, median was used instead due to its robustness to outliers
* $sg$ - stops the gradient from flowing through
* $d$ - distance function, typically $l_1$ or $l_2$
* $d_\text{ff}$ - number of neurons in a layer. In some experiments, we only summed over neurons with magnitude below the average magnitude of the layer, to encourage growth of small neurons, without thwarting the growth of the large ones
* $L$ - number of layers.



Since this idea is quite similar to weight decay, we decided not to optimize this term with Adam, but to split it from the task loss and optimize it using simple gradient descent - a similar technique is used in AdamW [@loshchilov2019decoupled] to incorporate weight decay loss term.

{{< include plots_mp/_mpl_magnitudes.qmd >}}
<br/>

Midpoint loss achieved the goal of boosting the small neurons, however it failed to make a positive impact on the model's performance.

{{< include plots_mp/_mpl_loss.qmd >}}

<!-- dodać baseline do obu wykresów -->

<!---
 <wariacje nt. Plotu ze strzałkami tłumaczące różne opcje w immunity>
-->

# Conclusion
In this work, we described our attempts to integrate pruning and Lottery Ticket Hypothesis via neuron recycling. Although we were not able to beat the baseline using our technique, we explored the topic thoroughly and conducted a series of experiments, providing valuable insights into the inner workings of a transformer. We hope that our findings may be a helpful resource for future studies and investigations in this area.
<!-- We would also want to encourage our fellow researchers to share their negative research blah blah blah -->
<!-- cite as... -->
<!-- Acknowledgements -->

# References

::: {#refs}
:::
