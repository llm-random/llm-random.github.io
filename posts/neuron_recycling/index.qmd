---
title: "Neuron Recycling"
author:
    -   name: Jakub Krajewski
        equal-contributor: true
        affiliations:
        -   ref: ideas
        -   ref: uow
    -   name: Maciej Pióro
        equal-contributor: true
        affiliations:
        -   ref: ideas
        -   ref: uow
    -   name: Sebastian Jaszczur
        affiliations:
        -   ref: ideas
        -   ref: uow
    -   name: Marek Cygan
        affiliations:
        -   ref: uow
affiliations:
    -   id: ideas
        name: IDEAS NCBR
    -   id: uow
        name: University of Warsaw
date: "2023-07-07"
# date-modified: "2023-07-07"
categories: []
image: "logo.png"
format:
  html:
    include-in-header:
      - text: |
          <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.20.0.min.js">
---

Sparse neural networks have garnered attention due to their theoretical promise of lowered computational demands and memory savings. However, to this date, the theoretical gains have largely failed to materialize due to the lack of hardware support for this kind of models. In this work, we explore the idea of neuron recycling which is inspired by pruning - a method often employed to induce sparsity in neural networks. We also present lessons we have learned along the way.


# Introduction

Pruning is a well-established technique used to sparsify neural networks. It relies on the fact that typically a large part of a trained neural network can be masked without impacting the accuracy of the network, albeit often requiring additional fine-tuning in order to regain some lost performance. Despite multiple works proposing various neuron-selection criteria for pruning, magnitude-based pruning remains a viable option. The Lottery Ticket Hypothesis is a major finding on the way to explain how the initialization impacts neural networks. The main point of the LTH is that through iterative pruning, performant subnetworks depending on the initialization can be found in neural networks. Those well-initialized network fragments are the namesake of LTH (the “lottery tickets”). Although some notions of the original LTH paper have been challenged, it has remained the subject of active research and a motivation for our work.
By combining the two ideas (pruning and LTH) we arrive at a new potential technique for raising neural network performance. If we are able to remove parts of the network without hurting the performance (pruning) and the fitness of a part of a network is determined at initialization, perhaps we could re-initialize the unnecessary network parts (i. e. draw more “lottery tickets”), leading to a better-performing network.

# Preliminaries

Before we move to the presentation of our experiments and findings, let's first discuss our training setup, define key terminologies, and go over the basics.

## Model and training setup
In our project, we are focusing on the Transformer <!--[citation]-->, since it's a major architecture across different domains <!--[citation]-->. For the specific type of the model, we are working on encoder-only BERT <!--[citation]-->. Taking into consideration available computational resources and expected iteration time (we wanted to try as many options as possible), we decided to opt for the BERT Medium configuration (with $d_\text{model}=512$ and $8$ attention heads). We focus on the feed-forward layer, because it is the most computationally demanding part of commonly-used transformer models and, in large models, it contains the majority of the parameters. At the same time, the amount of research focusing on the attention mechanism is overwhelming, suggesting that the feed-forward layer is a relatively unexplored area.

We trained the model for $80{,}000$ steps (around compute-optimal point), with Adam, using batch size of $256$ and learning rate of $0.001$.

It has been shown <!--citation-->, that the initialization of the weights in neural networks is of utmost importance to the convergence of the network. In all our experiments, we initialized the linear layers using the following distribution: <latex> as per <!--citation-->.

In the following part of this post, we will often use the terms of neuron and its magnitude. Below are the definitions we employ.

* **Neuron** <br/>
    Neurons are the basic building blocks of artificial neural networks. A neuron consists of some weights going “into” the neuron ($w_{in}\text{'s}$), an activation function (we use ReLU), and the weights going “out of" the neuron ($w_{out}\text{'s}$). Technically speaking, the neurons' weights are the parameters in the corresponding column and row of the two feed-forward matrices.

* **Magnitude** <br/>
    The magnitude of a neuron is given as $M=\sqrt{\sum{w_{in}^2} \sum{w_{out}^2}}$. The magnitude of a weight is simply its absolute value.

## Pruning
Pruning is a technique used to induce sparsity and decrease the parameter count in a neural network. In simple terms, it means deleting the least important neurons (structured pruning) or weights (unstructured pruning). A typical implementation realizes this by either multiplying the output of the deleted neurons by 0 or setting the weights of the neuron to 0. A widely-used proxy for the importance of a neuron or weight is its magnitude. You may find it counterintuitive, but we can even remove the whole FF Layer and the model will still work. This is because FF can be approximated by Attention.

It's important to note that the Transformer _can be trained _  totally without the feed-forward layer (with a loss in performance), since the model can learn to represent the same transformation using attention. Below we present a plot with loss curves of the model gradually pruned at the FF layer, starting in step $10{,}000$, such that the layer is completely masked in the end of the training.

{{< include plots_jk/_pruning_masked_b.qmd >}}

As you can see, the effect of pruning can't be visible for a significant fraction of the training time. It's also worth noting that in the end the model without FF Layer performs slightly better than the pruned one. This is because in the first case, Attention was trained to _adjust_ from the very beginning of the training.

## The goal
<!--
Napisać o modelu i dff-ach.
The main goal of our work was to improve the performance of a transformer model by recycling neurons. Typically the $d_\text{ff}$ in the transformer
-->
The end-goal of the project was to create a method that would allow us to make better use of the parameters in the feed-forward layer. In this context, a natural question arises - against what baseline should our results be compared? To answer this question, we trained the model with differing dimensionalities of the feed-forward layer. The results are presented below. The true BERT Medium configuration has $d_\text{ff}=2048$, and, as expected, the model's performance drops when the $d_\text{ff}$ is decreased and increases when the $d_\text{ff}$ is increased.

{{< include plots_mp/_dffs_loss.qmd >}}


# Understanding neuron magnitudes

One of the first natural questions we have asked ourselves, as we already knew that we wanted to take into consideration neuron magnitudes, was how does this metric behave and evolve during the training process. <rozbić to zdanie/zmienić> Intuitively, the magnitude of a neuron correlates with its significance. At first, we thought a histogram of neuron magnitudes would exhibit a normal distribution. However, our findings showed something different - the distribution follows a Pareto-like shape, with a majority of almost-zero or small values, as seen in the plot below.

{{< include plots_jk/_magnitudes.qmd >}}

<br/>

This discovery raised several questions. Are the majority of neurons with very small magnitudes insignificant? Can they be dropped? Or could it be that these "small" neurons are activated rarely, but are crucial for certain tasks? Alternatively, perhaps when combined, they contribute significantly to the overall performance? Although we initially expected a different distribution, we wanted to explore and find the "ideal" distribution of neurons.

As a side note: interestingly, we noticed that this discrepancy does not happen in the last layers of the network. As an example, below you can examine magnitudes for neurons in the 8th FF layer of the network.

{{< include plots_jk/_layer8.qmd >}}

<br/>

In order to find the ideal neuron distribution, we decided to give special attention to the feed-forward (FF) component of the network. <zmienić poprzednie zdanie> We periodically froze all parts of the network except for the FF component and continued to train it for several batches of data. We hypothesized that in this scenario, weaker neurons might "catch up," resulting in a more even distribution. The results of this experiment can be seen in the following plot.

{{< include plots_jk/_full_ret.qmd >}}

<br/>

We have also examined the scenario of retraining only small magnitude neurons, only large magnitude neurons and random subsets. How does it affect the performance? The results are depicted on the following plot.

{{< include plots_jk/_overtrain_loss.qmd >}}

Interestingly, retraining only the smallest neurons yields the best results when compared to reinforcing high-magnitude neurons or random subsets. This provided a compelling argument in favor of our technique. However, it is important to note that these experiments were based on pretraining relatively small, BERT-based models. We were curious to see how our observations would translate to well-established, large-scale foundation models like BERT Large or T5.

{{< include plots_mp/_bert_ff12.qmd >}}
{{< include plots_mp/_t5_ff5.qmd >}}

Upon examining the magnitudes in these foundation models, noticeable differences emerge. The magnitudes in T5 seem similar to those in our smaller models, while BERT and GPT-2 display more favorable distributions. What could account for these variations? We discovered that the use of weight decay plays a significant role. This simple but widely used technique has a considerable impact on the distribution phenomenon we've been investigating.

These findings support the idea of exploring neuron recycling more thoroughly and offer a solid foundation for further experiments. In subsequent sections, we will delve into the results of these investigations and share our insights.


# Recycling

The central part of our work was a method we called neuron recycling. The whole process boils down to three phases, repeated periodically: training, selection and reinitialization.

![](diagram.png){width=60% fig-align="center"}

* In the training phase, the model is trained to predict masked tokens (masked language modelling).
* In the selection phase, the least important neurons are determined, where the baseline criterion is neuron magnitude
* In the reinitialization phase, new weights are assigned to neurons.

Although this procedure is conceptually simple, it allows for many degrees of freedom. Here are some choices that can be made:

* The number of training steps before consecutive selection / reinitialization phases
* The percentage of recycled neurons
* Selection / reinitialization strategies

After examining the pruning literature [citations] we have found that the simple magnitude-based approach works best in most cases <plot pruning>. It is also easy to implement and computationally efficient. This approach is also grounded on our experiments. Below we present the training curves for the model pruned gradually using different criterions: high/low magnitude and random neurons.

{{< include plots_jk/_pruning.qmd >}}

As you can see, removing low magnitude neurons hurts the model the least, and removing high magnitude ones cases the largest loss. This is a good argument that this criterion correlates well with neuron significance.

## Baseline recycling

The most straightforward reinitialization scheme is to sample the weights of the reinitialized neurons from the initial distribution. After examining the performance of this solution, we could not see any difference between recycling and vanilla training. As a sanity check, we have examined the histogram presenting the number of times each neuron was recycled, discovering that the same small subset of neurons was being reinitialized over and over during training. As we have seen <link do distr throughout training>, on average magnitude of neurons grows throughout the training. Therefore, the newly sampled neurons have, on average, lower magnitudes than non-recycled neurons and are unable to catch up to non-recycled neurons before another selection phase. Thus, the recycled neurons are caught up in a vicious cycle in which they are always recycled before achieving high magnitude.


::: {#fig-elephant}

{{< include plots_mp/_vs_histogram.qmd >}}

Figure description
:::

{{< include plots_mp/_vc_vs_baseline.qmd >}}


<spróbować zrobić diagram z `vicious cycle`>

## Immunity

Another thing we tried to make reinitialization work was Immunity. The idea here is to encourage diverse recycling by making each recycled neuron immune to further recycling for some predefined number of steps. We hypothesized that a reinitialized neuron needs some time to grow, but in our initial setting, the neuron is recycled before enough growth happens, keeping the smaller neurons in a vicious cycle of periodically reoccurring reinitialization.
Unfortunately, in our experiments, the reinitialized neurons failed to grow even if given immunity. At the same time immunity of the small neurons lead to recycling of the large neurons, hurting the model’s performance.

{{< include plots_mp/_7vs3_histogram.qmd >}}

{{< include plots_mp/_7vs3vsBaseline_loss.qmd >}}


## Modifying reinitialization weights distribution

As we have pointed out before, magnitude and weight distribution drifts away from the initial distribution as the training progresses. However, during our initial attempts, we initialized the weights sampling from the initial distribution. To fix this issue, we decided to try out another weight sampling technique.
A feed-forward layer consists of two matrices. Each time a neuron is reinitialized, the corresponding row and column in the matrices are filled with new (reinitialized) weights. The new technique, when replacing the weights, used the normal distribution with mean and standard deviation equal to the mean and standard deviation of all the weights in the respective matrix. This approach, like immunity, eliminated the vicious cycle. However, this process introduced a lot of noise with adverse effect on the model's loss.


{{< include plots_mp/_plot_current_recycling_histogram.qmd >}}

{{< include plots_mp/_plot_init_vs_current.qmd >}}

## Copying existing neurons
At this stage of our project, we gained interest in the topic of growing neural networks. Intuitively, this problem has a similar part, in which we want to add new neurons or weights. In the case of Large Language Models, the topic is mentioned in [Gopher]. The authors describe that for their experiments, copying existing neurons was the best strategy.  We have also tried it, but without positive results.

{{< include plots_jk/_copying.qmd >}}

## Smooth recycling

In an effort to explain our past problems, we pointed out the discrete nature of our technology, as opposed to the continuous landscape of training/optimizers. To change this, we have modified our strategy to gradually change the value by linear interpolation. We have noticed that this way we were able to make training loss dynamics smoother, but without beating the baseline.

{{< include plots_jk/_smooth.qmd >}}

# Tangent - Midpoint Loss

While working towards the main goal of the project, we started investigating the distribution of neuron magnitudes during the training. We noticed that the magnitude distribution is quite uneven - a large percentage of neurons remains small, and the distribution is right-skewed.
Since the goal of our project was to reduce the number of low-quality, i.e., small neurons, we came up with a pretty risky solution: Midpoint Loss.
The idea was to introduce an additional loss term that would encourage neuron growth and "even-ness" of the magnitude distribution. The general equation for the midpoint loss is:

$$ Loss = \sum_{l = 1}^{L} \sum_{n = 1}^{dff} dist(M_{l,n}, stop\_grad(avg(M_{l,*})))$$
where:

* $M_{l,n}$ - magnitude of th $n^{\text{th}}$ neuron in the $l^{\text{th}}$ layer. In some experiments we used the $log$ of the magnitude.
* $dist$ - distance function, typically $l_1$, $l_2$.
* $avg$ - arithmetic mean. In some experiments, median was used instead due to its robustness to outliers.
* $L$ - number of layers.
* $d_\text{ff}$ - number of neurons in a layer. In some experiments, we only summed over neurons with magnitude below the average magnitude of the layer, to encourage growth of small neurons.
* $stop\_grad$ - stops the gradient from flowing through. Without stopping the gradient, the loss gradient computation becomes untractable.


Since this idea is quite similar to weight decay, we decided not to optimize this term with Adam, but to split it from the task loss and optimize it using simple gradient descent - a similar technique is used in AdamW to incorporate weight decay loss term.
```
{{< include plots_mp/_mpl_magnitudes.qmd >}}
```
Midpoint loss achieved the goal of boosting the small neurons, however it failed to make a positive impact on the model's performance.

{{< include plots_mp/_mpl_loss.qmd >}}

<!---
 <wariacje nt. Plotu ze strzałkami tłumaczące różne opcje w immunity>
-->
